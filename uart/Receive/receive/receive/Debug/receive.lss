
receive.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  000008f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008a4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000008f8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000928  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000228  00000000  00000000  00000968  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001d18  00000000  00000000  00000b90  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000109c  00000000  00000000  000028a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001165  00000000  00000000  00003944  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000458  00000000  00000000  00004aac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000adc  00000000  00000000  00004f04  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000f9c  00000000  00000000  000059e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001e8  00000000  00000000  0000697c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	79 c0       	rjmp	.+242    	; 0xf8 <__bad_interrupt>
   6:	00 00       	nop
   8:	77 c0       	rjmp	.+238    	; 0xf8 <__bad_interrupt>
   a:	00 00       	nop
   c:	75 c0       	rjmp	.+234    	; 0xf8 <__bad_interrupt>
   e:	00 00       	nop
  10:	73 c0       	rjmp	.+230    	; 0xf8 <__bad_interrupt>
  12:	00 00       	nop
  14:	71 c0       	rjmp	.+226    	; 0xf8 <__bad_interrupt>
  16:	00 00       	nop
  18:	6f c0       	rjmp	.+222    	; 0xf8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	6d c0       	rjmp	.+218    	; 0xf8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	6b c0       	rjmp	.+214    	; 0xf8 <__bad_interrupt>
  22:	00 00       	nop
  24:	69 c0       	rjmp	.+210    	; 0xf8 <__bad_interrupt>
  26:	00 00       	nop
  28:	67 c0       	rjmp	.+206    	; 0xf8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	65 c0       	rjmp	.+202    	; 0xf8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	63 c0       	rjmp	.+198    	; 0xf8 <__bad_interrupt>
  32:	00 00       	nop
  34:	61 c0       	rjmp	.+194    	; 0xf8 <__bad_interrupt>
  36:	00 00       	nop
  38:	5f c0       	rjmp	.+190    	; 0xf8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5d c0       	rjmp	.+186    	; 0xf8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	5b c0       	rjmp	.+182    	; 0xf8 <__bad_interrupt>
  42:	00 00       	nop
  44:	59 c0       	rjmp	.+178    	; 0xf8 <__bad_interrupt>
  46:	00 00       	nop
  48:	57 c0       	rjmp	.+174    	; 0xf8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	55 c0       	rjmp	.+170    	; 0xf8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	53 c0       	rjmp	.+166    	; 0xf8 <__bad_interrupt>
  52:	00 00       	nop
  54:	51 c0       	rjmp	.+162    	; 0xf8 <__bad_interrupt>
  56:	00 00       	nop
  58:	4f c0       	rjmp	.+158    	; 0xf8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	4d c0       	rjmp	.+154    	; 0xf8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	4b c0       	rjmp	.+150    	; 0xf8 <__bad_interrupt>
  62:	00 00       	nop
  64:	49 c0       	rjmp	.+146    	; 0xf8 <__bad_interrupt>
  66:	00 00       	nop
  68:	47 c0       	rjmp	.+142    	; 0xf8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	45 c0       	rjmp	.+138    	; 0xf8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	43 c0       	rjmp	.+134    	; 0xf8 <__bad_interrupt>
  72:	00 00       	nop
  74:	41 c0       	rjmp	.+130    	; 0xf8 <__bad_interrupt>
  76:	00 00       	nop
  78:	3f c0       	rjmp	.+126    	; 0xf8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	3d c0       	rjmp	.+122    	; 0xf8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	3b c0       	rjmp	.+118    	; 0xf8 <__bad_interrupt>
  82:	00 00       	nop
  84:	39 c0       	rjmp	.+114    	; 0xf8 <__bad_interrupt>
  86:	00 00       	nop
  88:	37 c0       	rjmp	.+110    	; 0xf8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	35 c0       	rjmp	.+106    	; 0xf8 <__bad_interrupt>
  8e:	00 00       	nop
  90:	33 c0       	rjmp	.+102    	; 0xf8 <__bad_interrupt>
  92:	00 00       	nop
  94:	31 c0       	rjmp	.+98     	; 0xf8 <__bad_interrupt>
  96:	00 00       	nop
  98:	2f c0       	rjmp	.+94     	; 0xf8 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	2d c0       	rjmp	.+90     	; 0xf8 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	2b c0       	rjmp	.+86     	; 0xf8 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	29 c0       	rjmp	.+82     	; 0xf8 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	27 c0       	rjmp	.+78     	; 0xf8 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	25 c0       	rjmp	.+74     	; 0xf8 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	23 c0       	rjmp	.+70     	; 0xf8 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	21 c0       	rjmp	.+66     	; 0xf8 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	1f c0       	rjmp	.+62     	; 0xf8 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	1d c0       	rjmp	.+58     	; 0xf8 <__bad_interrupt>
  be:	00 00       	nop
  c0:	1b c0       	rjmp	.+54     	; 0xf8 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	19 c0       	rjmp	.+50     	; 0xf8 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	17 c0       	rjmp	.+46     	; 0xf8 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	15 c0       	rjmp	.+42     	; 0xf8 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	13 c0       	rjmp	.+38     	; 0xf8 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	11 c0       	rjmp	.+34     	; 0xf8 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	0f c0       	rjmp	.+30     	; 0xf8 <__bad_interrupt>
  da:	00 00       	nop
  dc:	0d c0       	rjmp	.+26     	; 0xf8 <__bad_interrupt>
  de:	00 00       	nop
  e0:	0b c0       	rjmp	.+22     	; 0xf8 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60
  f4:	80 d3       	rcall	.+1792   	; 0x7f6 <main>
  f6:	d4 c3       	rjmp	.+1960   	; 0x8a0 <_exit>

000000f8 <__bad_interrupt>:
  f8:	83 cf       	rjmp	.-250    	; 0x0 <__vectors>

000000fa <GPIO_setupPinDirection>:
		}
	}
	

	return pin_value;
}
  fa:	68 30       	cpi	r22, 0x08	; 8
  fc:	08 f0       	brcs	.+2      	; 0x100 <GPIO_setupPinDirection+0x6>
  fe:	3b c1       	rjmp	.+630    	; 0x376 <GPIO_setupPinDirection+0x27c>
 100:	8b 30       	cpi	r24, 0x0B	; 11
 102:	08 f0       	brcs	.+2      	; 0x106 <GPIO_setupPinDirection+0xc>
 104:	38 c1       	rjmp	.+624    	; 0x376 <GPIO_setupPinDirection+0x27c>
 106:	81 11       	cpse	r24, r1
 108:	19 c0       	rjmp	.+50     	; 0x13c <GPIO_setupPinDirection+0x42>
 10a:	41 30       	cpi	r20, 0x01	; 1
 10c:	59 f4       	brne	.+22     	; 0x124 <GPIO_setupPinDirection+0x2a>
 10e:	21 b1       	in	r18, 0x01	; 1
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	02 c0       	rjmp	.+4      	; 0x11a <GPIO_setupPinDirection+0x20>
 116:	88 0f       	add	r24, r24
 118:	99 1f       	adc	r25, r25
 11a:	6a 95       	dec	r22
 11c:	e2 f7       	brpl	.-8      	; 0x116 <GPIO_setupPinDirection+0x1c>
 11e:	82 2b       	or	r24, r18
 120:	81 b9       	out	0x01, r24	; 1
 122:	08 95       	ret
 124:	21 b1       	in	r18, 0x01	; 1
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	02 c0       	rjmp	.+4      	; 0x130 <GPIO_setupPinDirection+0x36>
 12c:	88 0f       	add	r24, r24
 12e:	99 1f       	adc	r25, r25
 130:	6a 95       	dec	r22
 132:	e2 f7       	brpl	.-8      	; 0x12c <GPIO_setupPinDirection+0x32>
 134:	80 95       	com	r24
 136:	82 23       	and	r24, r18
 138:	81 b9       	out	0x01, r24	; 1
 13a:	08 95       	ret
 13c:	81 30       	cpi	r24, 0x01	; 1
 13e:	c9 f4       	brne	.+50     	; 0x172 <GPIO_setupPinDirection+0x78>
 140:	41 30       	cpi	r20, 0x01	; 1
 142:	59 f4       	brne	.+22     	; 0x15a <GPIO_setupPinDirection+0x60>
 144:	24 b1       	in	r18, 0x04	; 4
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	02 c0       	rjmp	.+4      	; 0x150 <GPIO_setupPinDirection+0x56>
 14c:	88 0f       	add	r24, r24
 14e:	99 1f       	adc	r25, r25
 150:	6a 95       	dec	r22
 152:	e2 f7       	brpl	.-8      	; 0x14c <GPIO_setupPinDirection+0x52>
 154:	82 2b       	or	r24, r18
 156:	84 b9       	out	0x04, r24	; 4
 158:	08 95       	ret
 15a:	24 b1       	in	r18, 0x04	; 4
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	02 c0       	rjmp	.+4      	; 0x166 <GPIO_setupPinDirection+0x6c>
 162:	88 0f       	add	r24, r24
 164:	99 1f       	adc	r25, r25
 166:	6a 95       	dec	r22
 168:	e2 f7       	brpl	.-8      	; 0x162 <GPIO_setupPinDirection+0x68>
 16a:	80 95       	com	r24
 16c:	82 23       	and	r24, r18
 16e:	84 b9       	out	0x04, r24	; 4
 170:	08 95       	ret
 172:	82 30       	cpi	r24, 0x02	; 2
 174:	c9 f4       	brne	.+50     	; 0x1a8 <GPIO_setupPinDirection+0xae>
 176:	41 30       	cpi	r20, 0x01	; 1
 178:	59 f4       	brne	.+22     	; 0x190 <GPIO_setupPinDirection+0x96>
 17a:	27 b1       	in	r18, 0x07	; 7
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	02 c0       	rjmp	.+4      	; 0x186 <GPIO_setupPinDirection+0x8c>
 182:	88 0f       	add	r24, r24
 184:	99 1f       	adc	r25, r25
 186:	6a 95       	dec	r22
 188:	e2 f7       	brpl	.-8      	; 0x182 <GPIO_setupPinDirection+0x88>
 18a:	82 2b       	or	r24, r18
 18c:	87 b9       	out	0x07, r24	; 7
 18e:	08 95       	ret
 190:	27 b1       	in	r18, 0x07	; 7
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	02 c0       	rjmp	.+4      	; 0x19c <GPIO_setupPinDirection+0xa2>
 198:	88 0f       	add	r24, r24
 19a:	99 1f       	adc	r25, r25
 19c:	6a 95       	dec	r22
 19e:	e2 f7       	brpl	.-8      	; 0x198 <GPIO_setupPinDirection+0x9e>
 1a0:	80 95       	com	r24
 1a2:	82 23       	and	r24, r18
 1a4:	87 b9       	out	0x07, r24	; 7
 1a6:	08 95       	ret
 1a8:	83 30       	cpi	r24, 0x03	; 3
 1aa:	c9 f4       	brne	.+50     	; 0x1de <GPIO_setupPinDirection+0xe4>
 1ac:	41 30       	cpi	r20, 0x01	; 1
 1ae:	59 f4       	brne	.+22     	; 0x1c6 <GPIO_setupPinDirection+0xcc>
 1b0:	2a b1       	in	r18, 0x0a	; 10
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	02 c0       	rjmp	.+4      	; 0x1bc <GPIO_setupPinDirection+0xc2>
 1b8:	88 0f       	add	r24, r24
 1ba:	99 1f       	adc	r25, r25
 1bc:	6a 95       	dec	r22
 1be:	e2 f7       	brpl	.-8      	; 0x1b8 <GPIO_setupPinDirection+0xbe>
 1c0:	82 2b       	or	r24, r18
 1c2:	8a b9       	out	0x0a, r24	; 10
 1c4:	08 95       	ret
 1c6:	2a b1       	in	r18, 0x0a	; 10
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <GPIO_setupPinDirection+0xd8>
 1ce:	88 0f       	add	r24, r24
 1d0:	99 1f       	adc	r25, r25
 1d2:	6a 95       	dec	r22
 1d4:	e2 f7       	brpl	.-8      	; 0x1ce <GPIO_setupPinDirection+0xd4>
 1d6:	80 95       	com	r24
 1d8:	82 23       	and	r24, r18
 1da:	8a b9       	out	0x0a, r24	; 10
 1dc:	08 95       	ret
 1de:	84 30       	cpi	r24, 0x04	; 4
 1e0:	c9 f4       	brne	.+50     	; 0x214 <GPIO_setupPinDirection+0x11a>
 1e2:	41 30       	cpi	r20, 0x01	; 1
 1e4:	59 f4       	brne	.+22     	; 0x1fc <GPIO_setupPinDirection+0x102>
 1e6:	2d b1       	in	r18, 0x0d	; 13
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <GPIO_setupPinDirection+0xf8>
 1ee:	88 0f       	add	r24, r24
 1f0:	99 1f       	adc	r25, r25
 1f2:	6a 95       	dec	r22
 1f4:	e2 f7       	brpl	.-8      	; 0x1ee <GPIO_setupPinDirection+0xf4>
 1f6:	82 2b       	or	r24, r18
 1f8:	8d b9       	out	0x0d, r24	; 13
 1fa:	08 95       	ret
 1fc:	2d b1       	in	r18, 0x0d	; 13
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	02 c0       	rjmp	.+4      	; 0x208 <GPIO_setupPinDirection+0x10e>
 204:	88 0f       	add	r24, r24
 206:	99 1f       	adc	r25, r25
 208:	6a 95       	dec	r22
 20a:	e2 f7       	brpl	.-8      	; 0x204 <GPIO_setupPinDirection+0x10a>
 20c:	80 95       	com	r24
 20e:	82 23       	and	r24, r18
 210:	8d b9       	out	0x0d, r24	; 13
 212:	08 95       	ret
 214:	85 30       	cpi	r24, 0x05	; 5
 216:	c9 f4       	brne	.+50     	; 0x24a <GPIO_setupPinDirection+0x150>
 218:	41 30       	cpi	r20, 0x01	; 1
 21a:	59 f4       	brne	.+22     	; 0x232 <GPIO_setupPinDirection+0x138>
 21c:	20 b3       	in	r18, 0x10	; 16
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	02 c0       	rjmp	.+4      	; 0x228 <GPIO_setupPinDirection+0x12e>
 224:	88 0f       	add	r24, r24
 226:	99 1f       	adc	r25, r25
 228:	6a 95       	dec	r22
 22a:	e2 f7       	brpl	.-8      	; 0x224 <GPIO_setupPinDirection+0x12a>
 22c:	82 2b       	or	r24, r18
 22e:	80 bb       	out	0x10, r24	; 16
 230:	08 95       	ret
 232:	20 b3       	in	r18, 0x10	; 16
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	02 c0       	rjmp	.+4      	; 0x23e <GPIO_setupPinDirection+0x144>
 23a:	88 0f       	add	r24, r24
 23c:	99 1f       	adc	r25, r25
 23e:	6a 95       	dec	r22
 240:	e2 f7       	brpl	.-8      	; 0x23a <GPIO_setupPinDirection+0x140>
 242:	80 95       	com	r24
 244:	82 23       	and	r24, r18
 246:	80 bb       	out	0x10, r24	; 16
 248:	08 95       	ret
 24a:	86 30       	cpi	r24, 0x06	; 6
 24c:	c9 f4       	brne	.+50     	; 0x280 <GPIO_setupPinDirection+0x186>
 24e:	41 30       	cpi	r20, 0x01	; 1
 250:	59 f4       	brne	.+22     	; 0x268 <GPIO_setupPinDirection+0x16e>
 252:	23 b3       	in	r18, 0x13	; 19
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	02 c0       	rjmp	.+4      	; 0x25e <GPIO_setupPinDirection+0x164>
 25a:	88 0f       	add	r24, r24
 25c:	99 1f       	adc	r25, r25
 25e:	6a 95       	dec	r22
 260:	e2 f7       	brpl	.-8      	; 0x25a <GPIO_setupPinDirection+0x160>
 262:	82 2b       	or	r24, r18
 264:	83 bb       	out	0x13, r24	; 19
 266:	08 95       	ret
 268:	23 b3       	in	r18, 0x13	; 19
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	02 c0       	rjmp	.+4      	; 0x274 <GPIO_setupPinDirection+0x17a>
 270:	88 0f       	add	r24, r24
 272:	99 1f       	adc	r25, r25
 274:	6a 95       	dec	r22
 276:	e2 f7       	brpl	.-8      	; 0x270 <GPIO_setupPinDirection+0x176>
 278:	80 95       	com	r24
 27a:	82 23       	and	r24, r18
 27c:	83 bb       	out	0x13, r24	; 19
 27e:	08 95       	ret
 280:	87 30       	cpi	r24, 0x07	; 7
 282:	e9 f4       	brne	.+58     	; 0x2be <GPIO_setupPinDirection+0x1c4>
 284:	41 30       	cpi	r20, 0x01	; 1
 286:	69 f4       	brne	.+26     	; 0x2a2 <GPIO_setupPinDirection+0x1a8>
 288:	e1 e0       	ldi	r30, 0x01	; 1
 28a:	f1 e0       	ldi	r31, 0x01	; 1
 28c:	20 81       	ld	r18, Z
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	02 c0       	rjmp	.+4      	; 0x298 <GPIO_setupPinDirection+0x19e>
 294:	88 0f       	add	r24, r24
 296:	99 1f       	adc	r25, r25
 298:	6a 95       	dec	r22
 29a:	e2 f7       	brpl	.-8      	; 0x294 <GPIO_setupPinDirection+0x19a>
 29c:	82 2b       	or	r24, r18
 29e:	80 83       	st	Z, r24
 2a0:	08 95       	ret
 2a2:	e1 e0       	ldi	r30, 0x01	; 1
 2a4:	f1 e0       	ldi	r31, 0x01	; 1
 2a6:	20 81       	ld	r18, Z
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <GPIO_setupPinDirection+0x1b8>
 2ae:	88 0f       	add	r24, r24
 2b0:	99 1f       	adc	r25, r25
 2b2:	6a 95       	dec	r22
 2b4:	e2 f7       	brpl	.-8      	; 0x2ae <GPIO_setupPinDirection+0x1b4>
 2b6:	80 95       	com	r24
 2b8:	82 23       	and	r24, r18
 2ba:	80 83       	st	Z, r24
 2bc:	08 95       	ret
 2be:	88 30       	cpi	r24, 0x08	; 8
 2c0:	e9 f4       	brne	.+58     	; 0x2fc <GPIO_setupPinDirection+0x202>
 2c2:	41 30       	cpi	r20, 0x01	; 1
 2c4:	69 f4       	brne	.+26     	; 0x2e0 <GPIO_setupPinDirection+0x1e6>
 2c6:	e4 e0       	ldi	r30, 0x04	; 4
 2c8:	f1 e0       	ldi	r31, 0x01	; 1
 2ca:	20 81       	ld	r18, Z
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <GPIO_setupPinDirection+0x1dc>
 2d2:	88 0f       	add	r24, r24
 2d4:	99 1f       	adc	r25, r25
 2d6:	6a 95       	dec	r22
 2d8:	e2 f7       	brpl	.-8      	; 0x2d2 <GPIO_setupPinDirection+0x1d8>
 2da:	82 2b       	or	r24, r18
 2dc:	80 83       	st	Z, r24
 2de:	08 95       	ret
 2e0:	e4 e0       	ldi	r30, 0x04	; 4
 2e2:	f1 e0       	ldi	r31, 0x01	; 1
 2e4:	20 81       	ld	r18, Z
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <GPIO_setupPinDirection+0x1f6>
 2ec:	88 0f       	add	r24, r24
 2ee:	99 1f       	adc	r25, r25
 2f0:	6a 95       	dec	r22
 2f2:	e2 f7       	brpl	.-8      	; 0x2ec <GPIO_setupPinDirection+0x1f2>
 2f4:	80 95       	com	r24
 2f6:	82 23       	and	r24, r18
 2f8:	80 83       	st	Z, r24
 2fa:	08 95       	ret
 2fc:	89 30       	cpi	r24, 0x09	; 9
 2fe:	e9 f4       	brne	.+58     	; 0x33a <GPIO_setupPinDirection+0x240>
 300:	41 30       	cpi	r20, 0x01	; 1
 302:	69 f4       	brne	.+26     	; 0x31e <GPIO_setupPinDirection+0x224>
 304:	e7 e0       	ldi	r30, 0x07	; 7
 306:	f1 e0       	ldi	r31, 0x01	; 1
 308:	20 81       	ld	r18, Z
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	02 c0       	rjmp	.+4      	; 0x314 <GPIO_setupPinDirection+0x21a>
 310:	88 0f       	add	r24, r24
 312:	99 1f       	adc	r25, r25
 314:	6a 95       	dec	r22
 316:	e2 f7       	brpl	.-8      	; 0x310 <GPIO_setupPinDirection+0x216>
 318:	82 2b       	or	r24, r18
 31a:	80 83       	st	Z, r24
 31c:	08 95       	ret
 31e:	e7 e0       	ldi	r30, 0x07	; 7
 320:	f1 e0       	ldi	r31, 0x01	; 1
 322:	20 81       	ld	r18, Z
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	02 c0       	rjmp	.+4      	; 0x32e <GPIO_setupPinDirection+0x234>
 32a:	88 0f       	add	r24, r24
 32c:	99 1f       	adc	r25, r25
 32e:	6a 95       	dec	r22
 330:	e2 f7       	brpl	.-8      	; 0x32a <GPIO_setupPinDirection+0x230>
 332:	80 95       	com	r24
 334:	82 23       	and	r24, r18
 336:	80 83       	st	Z, r24
 338:	08 95       	ret
 33a:	8a 30       	cpi	r24, 0x0A	; 10
 33c:	e1 f4       	brne	.+56     	; 0x376 <GPIO_setupPinDirection+0x27c>
 33e:	41 30       	cpi	r20, 0x01	; 1
 340:	69 f4       	brne	.+26     	; 0x35c <GPIO_setupPinDirection+0x262>
 342:	ea e0       	ldi	r30, 0x0A	; 10
 344:	f1 e0       	ldi	r31, 0x01	; 1
 346:	20 81       	ld	r18, Z
 348:	81 e0       	ldi	r24, 0x01	; 1
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	02 c0       	rjmp	.+4      	; 0x352 <GPIO_setupPinDirection+0x258>
 34e:	88 0f       	add	r24, r24
 350:	99 1f       	adc	r25, r25
 352:	6a 95       	dec	r22
 354:	e2 f7       	brpl	.-8      	; 0x34e <GPIO_setupPinDirection+0x254>
 356:	82 2b       	or	r24, r18
 358:	80 83       	st	Z, r24
 35a:	08 95       	ret
 35c:	ea e0       	ldi	r30, 0x0A	; 10
 35e:	f1 e0       	ldi	r31, 0x01	; 1
 360:	20 81       	ld	r18, Z
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	02 c0       	rjmp	.+4      	; 0x36c <GPIO_setupPinDirection+0x272>
 368:	88 0f       	add	r24, r24
 36a:	99 1f       	adc	r25, r25
 36c:	6a 95       	dec	r22
 36e:	e2 f7       	brpl	.-8      	; 0x368 <GPIO_setupPinDirection+0x26e>
 370:	80 95       	com	r24
 372:	82 23       	and	r24, r18
 374:	80 83       	st	Z, r24
 376:	08 95       	ret

00000378 <GPIO_writePin>:
 378:	68 30       	cpi	r22, 0x08	; 8
 37a:	08 f0       	brcs	.+2      	; 0x37e <GPIO_writePin+0x6>
 37c:	3b c1       	rjmp	.+630    	; 0x5f4 <__LOCK_REGION_LENGTH__+0x1f4>
 37e:	8b 30       	cpi	r24, 0x0B	; 11
 380:	08 f0       	brcs	.+2      	; 0x384 <GPIO_writePin+0xc>
 382:	38 c1       	rjmp	.+624    	; 0x5f4 <__LOCK_REGION_LENGTH__+0x1f4>
 384:	81 11       	cpse	r24, r1
 386:	19 c0       	rjmp	.+50     	; 0x3ba <GPIO_writePin+0x42>
 388:	41 30       	cpi	r20, 0x01	; 1
 38a:	59 f4       	brne	.+22     	; 0x3a2 <GPIO_writePin+0x2a>
 38c:	22 b1       	in	r18, 0x02	; 2
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	02 c0       	rjmp	.+4      	; 0x398 <GPIO_writePin+0x20>
 394:	88 0f       	add	r24, r24
 396:	99 1f       	adc	r25, r25
 398:	6a 95       	dec	r22
 39a:	e2 f7       	brpl	.-8      	; 0x394 <GPIO_writePin+0x1c>
 39c:	82 2b       	or	r24, r18
 39e:	82 b9       	out	0x02, r24	; 2
 3a0:	08 95       	ret
 3a2:	22 b1       	in	r18, 0x02	; 2
 3a4:	81 e0       	ldi	r24, 0x01	; 1
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	02 c0       	rjmp	.+4      	; 0x3ae <GPIO_writePin+0x36>
 3aa:	88 0f       	add	r24, r24
 3ac:	99 1f       	adc	r25, r25
 3ae:	6a 95       	dec	r22
 3b0:	e2 f7       	brpl	.-8      	; 0x3aa <GPIO_writePin+0x32>
 3b2:	80 95       	com	r24
 3b4:	82 23       	and	r24, r18
 3b6:	82 b9       	out	0x02, r24	; 2
 3b8:	08 95       	ret
 3ba:	81 30       	cpi	r24, 0x01	; 1
 3bc:	c9 f4       	brne	.+50     	; 0x3f0 <GPIO_writePin+0x78>
 3be:	41 30       	cpi	r20, 0x01	; 1
 3c0:	59 f4       	brne	.+22     	; 0x3d8 <GPIO_writePin+0x60>
 3c2:	25 b1       	in	r18, 0x05	; 5
 3c4:	81 e0       	ldi	r24, 0x01	; 1
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	02 c0       	rjmp	.+4      	; 0x3ce <GPIO_writePin+0x56>
 3ca:	88 0f       	add	r24, r24
 3cc:	99 1f       	adc	r25, r25
 3ce:	6a 95       	dec	r22
 3d0:	e2 f7       	brpl	.-8      	; 0x3ca <GPIO_writePin+0x52>
 3d2:	82 2b       	or	r24, r18
 3d4:	85 b9       	out	0x05, r24	; 5
 3d6:	08 95       	ret
 3d8:	25 b1       	in	r18, 0x05	; 5
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	02 c0       	rjmp	.+4      	; 0x3e4 <GPIO_writePin+0x6c>
 3e0:	88 0f       	add	r24, r24
 3e2:	99 1f       	adc	r25, r25
 3e4:	6a 95       	dec	r22
 3e6:	e2 f7       	brpl	.-8      	; 0x3e0 <GPIO_writePin+0x68>
 3e8:	80 95       	com	r24
 3ea:	82 23       	and	r24, r18
 3ec:	85 b9       	out	0x05, r24	; 5
 3ee:	08 95       	ret
 3f0:	82 30       	cpi	r24, 0x02	; 2
 3f2:	c9 f4       	brne	.+50     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 3f4:	41 30       	cpi	r20, 0x01	; 1
 3f6:	59 f4       	brne	.+22     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 3f8:	28 b1       	in	r18, 0x08	; 8
 3fa:	81 e0       	ldi	r24, 0x01	; 1
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	02 c0       	rjmp	.+4      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 400:	88 0f       	add	r24, r24
 402:	99 1f       	adc	r25, r25
 404:	6a 95       	dec	r22
 406:	e2 f7       	brpl	.-8      	; 0x400 <__LOCK_REGION_LENGTH__>
 408:	82 2b       	or	r24, r18
 40a:	88 b9       	out	0x08, r24	; 8
 40c:	08 95       	ret
 40e:	28 b1       	in	r18, 0x08	; 8
 410:	81 e0       	ldi	r24, 0x01	; 1
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	02 c0       	rjmp	.+4      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 416:	88 0f       	add	r24, r24
 418:	99 1f       	adc	r25, r25
 41a:	6a 95       	dec	r22
 41c:	e2 f7       	brpl	.-8      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 41e:	80 95       	com	r24
 420:	82 23       	and	r24, r18
 422:	88 b9       	out	0x08, r24	; 8
 424:	08 95       	ret
 426:	83 30       	cpi	r24, 0x03	; 3
 428:	c9 f4       	brne	.+50     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 42a:	41 30       	cpi	r20, 0x01	; 1
 42c:	59 f4       	brne	.+22     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 42e:	2b b1       	in	r18, 0x0b	; 11
 430:	81 e0       	ldi	r24, 0x01	; 1
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	02 c0       	rjmp	.+4      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 436:	88 0f       	add	r24, r24
 438:	99 1f       	adc	r25, r25
 43a:	6a 95       	dec	r22
 43c:	e2 f7       	brpl	.-8      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 43e:	82 2b       	or	r24, r18
 440:	8b b9       	out	0x0b, r24	; 11
 442:	08 95       	ret
 444:	2b b1       	in	r18, 0x0b	; 11
 446:	81 e0       	ldi	r24, 0x01	; 1
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	02 c0       	rjmp	.+4      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 44c:	88 0f       	add	r24, r24
 44e:	99 1f       	adc	r25, r25
 450:	6a 95       	dec	r22
 452:	e2 f7       	brpl	.-8      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 454:	80 95       	com	r24
 456:	82 23       	and	r24, r18
 458:	8b b9       	out	0x0b, r24	; 11
 45a:	08 95       	ret
 45c:	84 30       	cpi	r24, 0x04	; 4
 45e:	c9 f4       	brne	.+50     	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
 460:	41 30       	cpi	r20, 0x01	; 1
 462:	59 f4       	brne	.+22     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
 464:	2e b1       	in	r18, 0x0e	; 14
 466:	81 e0       	ldi	r24, 0x01	; 1
 468:	90 e0       	ldi	r25, 0x00	; 0
 46a:	02 c0       	rjmp	.+4      	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
 46c:	88 0f       	add	r24, r24
 46e:	99 1f       	adc	r25, r25
 470:	6a 95       	dec	r22
 472:	e2 f7       	brpl	.-8      	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
 474:	82 2b       	or	r24, r18
 476:	8e b9       	out	0x0e, r24	; 14
 478:	08 95       	ret
 47a:	2e b1       	in	r18, 0x0e	; 14
 47c:	81 e0       	ldi	r24, 0x01	; 1
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	02 c0       	rjmp	.+4      	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
 482:	88 0f       	add	r24, r24
 484:	99 1f       	adc	r25, r25
 486:	6a 95       	dec	r22
 488:	e2 f7       	brpl	.-8      	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
 48a:	80 95       	com	r24
 48c:	82 23       	and	r24, r18
 48e:	8e b9       	out	0x0e, r24	; 14
 490:	08 95       	ret
 492:	85 30       	cpi	r24, 0x05	; 5
 494:	c9 f4       	brne	.+50     	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
 496:	41 30       	cpi	r20, 0x01	; 1
 498:	59 f4       	brne	.+22     	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
 49a:	21 b3       	in	r18, 0x11	; 17
 49c:	81 e0       	ldi	r24, 0x01	; 1
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	02 c0       	rjmp	.+4      	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
 4a2:	88 0f       	add	r24, r24
 4a4:	99 1f       	adc	r25, r25
 4a6:	6a 95       	dec	r22
 4a8:	e2 f7       	brpl	.-8      	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 4aa:	82 2b       	or	r24, r18
 4ac:	81 bb       	out	0x11, r24	; 17
 4ae:	08 95       	ret
 4b0:	21 b3       	in	r18, 0x11	; 17
 4b2:	81 e0       	ldi	r24, 0x01	; 1
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	02 c0       	rjmp	.+4      	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
 4b8:	88 0f       	add	r24, r24
 4ba:	99 1f       	adc	r25, r25
 4bc:	6a 95       	dec	r22
 4be:	e2 f7       	brpl	.-8      	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
 4c0:	80 95       	com	r24
 4c2:	82 23       	and	r24, r18
 4c4:	81 bb       	out	0x11, r24	; 17
 4c6:	08 95       	ret
 4c8:	86 30       	cpi	r24, 0x06	; 6
 4ca:	c9 f4       	brne	.+50     	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>
 4cc:	41 30       	cpi	r20, 0x01	; 1
 4ce:	59 f4       	brne	.+22     	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
 4d0:	24 b3       	in	r18, 0x14	; 20
 4d2:	81 e0       	ldi	r24, 0x01	; 1
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	02 c0       	rjmp	.+4      	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
 4d8:	88 0f       	add	r24, r24
 4da:	99 1f       	adc	r25, r25
 4dc:	6a 95       	dec	r22
 4de:	e2 f7       	brpl	.-8      	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
 4e0:	82 2b       	or	r24, r18
 4e2:	84 bb       	out	0x14, r24	; 20
 4e4:	08 95       	ret
 4e6:	24 b3       	in	r18, 0x14	; 20
 4e8:	81 e0       	ldi	r24, 0x01	; 1
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	02 c0       	rjmp	.+4      	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
 4ee:	88 0f       	add	r24, r24
 4f0:	99 1f       	adc	r25, r25
 4f2:	6a 95       	dec	r22
 4f4:	e2 f7       	brpl	.-8      	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
 4f6:	80 95       	com	r24
 4f8:	82 23       	and	r24, r18
 4fa:	84 bb       	out	0x14, r24	; 20
 4fc:	08 95       	ret
 4fe:	87 30       	cpi	r24, 0x07	; 7
 500:	e9 f4       	brne	.+58     	; 0x53c <__LOCK_REGION_LENGTH__+0x13c>
 502:	41 30       	cpi	r20, 0x01	; 1
 504:	69 f4       	brne	.+26     	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
 506:	e2 e0       	ldi	r30, 0x02	; 2
 508:	f1 e0       	ldi	r31, 0x01	; 1
 50a:	20 81       	ld	r18, Z
 50c:	81 e0       	ldi	r24, 0x01	; 1
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	02 c0       	rjmp	.+4      	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
 512:	88 0f       	add	r24, r24
 514:	99 1f       	adc	r25, r25
 516:	6a 95       	dec	r22
 518:	e2 f7       	brpl	.-8      	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
 51a:	82 2b       	or	r24, r18
 51c:	80 83       	st	Z, r24
 51e:	08 95       	ret
 520:	e2 e0       	ldi	r30, 0x02	; 2
 522:	f1 e0       	ldi	r31, 0x01	; 1
 524:	20 81       	ld	r18, Z
 526:	81 e0       	ldi	r24, 0x01	; 1
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	02 c0       	rjmp	.+4      	; 0x530 <__LOCK_REGION_LENGTH__+0x130>
 52c:	88 0f       	add	r24, r24
 52e:	99 1f       	adc	r25, r25
 530:	6a 95       	dec	r22
 532:	e2 f7       	brpl	.-8      	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
 534:	80 95       	com	r24
 536:	82 23       	and	r24, r18
 538:	80 83       	st	Z, r24
 53a:	08 95       	ret
 53c:	88 30       	cpi	r24, 0x08	; 8
 53e:	e9 f4       	brne	.+58     	; 0x57a <__LOCK_REGION_LENGTH__+0x17a>
 540:	41 30       	cpi	r20, 0x01	; 1
 542:	69 f4       	brne	.+26     	; 0x55e <__LOCK_REGION_LENGTH__+0x15e>
 544:	e5 e0       	ldi	r30, 0x05	; 5
 546:	f1 e0       	ldi	r31, 0x01	; 1
 548:	20 81       	ld	r18, Z
 54a:	81 e0       	ldi	r24, 0x01	; 1
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	02 c0       	rjmp	.+4      	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
 550:	88 0f       	add	r24, r24
 552:	99 1f       	adc	r25, r25
 554:	6a 95       	dec	r22
 556:	e2 f7       	brpl	.-8      	; 0x550 <__LOCK_REGION_LENGTH__+0x150>
 558:	82 2b       	or	r24, r18
 55a:	80 83       	st	Z, r24
 55c:	08 95       	ret
 55e:	eb e0       	ldi	r30, 0x0B	; 11
 560:	f1 e0       	ldi	r31, 0x01	; 1
 562:	20 81       	ld	r18, Z
 564:	81 e0       	ldi	r24, 0x01	; 1
 566:	90 e0       	ldi	r25, 0x00	; 0
 568:	02 c0       	rjmp	.+4      	; 0x56e <__LOCK_REGION_LENGTH__+0x16e>
 56a:	88 0f       	add	r24, r24
 56c:	99 1f       	adc	r25, r25
 56e:	6a 95       	dec	r22
 570:	e2 f7       	brpl	.-8      	; 0x56a <__LOCK_REGION_LENGTH__+0x16a>
 572:	80 95       	com	r24
 574:	82 23       	and	r24, r18
 576:	80 83       	st	Z, r24
 578:	08 95       	ret
 57a:	89 30       	cpi	r24, 0x09	; 9
 57c:	e9 f4       	brne	.+58     	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
 57e:	41 30       	cpi	r20, 0x01	; 1
 580:	69 f4       	brne	.+26     	; 0x59c <__LOCK_REGION_LENGTH__+0x19c>
 582:	e8 e0       	ldi	r30, 0x08	; 8
 584:	f1 e0       	ldi	r31, 0x01	; 1
 586:	20 81       	ld	r18, Z
 588:	81 e0       	ldi	r24, 0x01	; 1
 58a:	90 e0       	ldi	r25, 0x00	; 0
 58c:	02 c0       	rjmp	.+4      	; 0x592 <__LOCK_REGION_LENGTH__+0x192>
 58e:	88 0f       	add	r24, r24
 590:	99 1f       	adc	r25, r25
 592:	6a 95       	dec	r22
 594:	e2 f7       	brpl	.-8      	; 0x58e <__LOCK_REGION_LENGTH__+0x18e>
 596:	82 2b       	or	r24, r18
 598:	80 83       	st	Z, r24
 59a:	08 95       	ret
 59c:	e8 e0       	ldi	r30, 0x08	; 8
 59e:	f1 e0       	ldi	r31, 0x01	; 1
 5a0:	20 81       	ld	r18, Z
 5a2:	81 e0       	ldi	r24, 0x01	; 1
 5a4:	90 e0       	ldi	r25, 0x00	; 0
 5a6:	02 c0       	rjmp	.+4      	; 0x5ac <__LOCK_REGION_LENGTH__+0x1ac>
 5a8:	88 0f       	add	r24, r24
 5aa:	99 1f       	adc	r25, r25
 5ac:	6a 95       	dec	r22
 5ae:	e2 f7       	brpl	.-8      	; 0x5a8 <__LOCK_REGION_LENGTH__+0x1a8>
 5b0:	80 95       	com	r24
 5b2:	82 23       	and	r24, r18
 5b4:	80 83       	st	Z, r24
 5b6:	08 95       	ret
 5b8:	8a 30       	cpi	r24, 0x0A	; 10
 5ba:	e1 f4       	brne	.+56     	; 0x5f4 <__LOCK_REGION_LENGTH__+0x1f4>
 5bc:	41 30       	cpi	r20, 0x01	; 1
 5be:	69 f4       	brne	.+26     	; 0x5da <__LOCK_REGION_LENGTH__+0x1da>
 5c0:	eb e0       	ldi	r30, 0x0B	; 11
 5c2:	f1 e0       	ldi	r31, 0x01	; 1
 5c4:	20 81       	ld	r18, Z
 5c6:	81 e0       	ldi	r24, 0x01	; 1
 5c8:	90 e0       	ldi	r25, 0x00	; 0
 5ca:	02 c0       	rjmp	.+4      	; 0x5d0 <__LOCK_REGION_LENGTH__+0x1d0>
 5cc:	88 0f       	add	r24, r24
 5ce:	99 1f       	adc	r25, r25
 5d0:	6a 95       	dec	r22
 5d2:	e2 f7       	brpl	.-8      	; 0x5cc <__LOCK_REGION_LENGTH__+0x1cc>
 5d4:	82 2b       	or	r24, r18
 5d6:	80 83       	st	Z, r24
 5d8:	08 95       	ret
 5da:	eb e0       	ldi	r30, 0x0B	; 11
 5dc:	f1 e0       	ldi	r31, 0x01	; 1
 5de:	20 81       	ld	r18, Z
 5e0:	81 e0       	ldi	r24, 0x01	; 1
 5e2:	90 e0       	ldi	r25, 0x00	; 0
 5e4:	02 c0       	rjmp	.+4      	; 0x5ea <__LOCK_REGION_LENGTH__+0x1ea>
 5e6:	88 0f       	add	r24, r24
 5e8:	99 1f       	adc	r25, r25
 5ea:	6a 95       	dec	r22
 5ec:	e2 f7       	brpl	.-8      	; 0x5e6 <__LOCK_REGION_LENGTH__+0x1e6>
 5ee:	80 95       	com	r24
 5f0:	82 23       	and	r24, r18
 5f2:	80 83       	st	Z, r24
 5f4:	08 95       	ret

000005f6 <GPIO_setupPortDirection>:
{
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
 5f6:	8b 30       	cpi	r24, 0x0B	; 11
 5f8:	78 f5       	brcc	.+94     	; 0x658 <GPIO_setupPortDirection+0x62>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		if(port_num == PORTA_ID)
 5fa:	81 11       	cpse	r24, r1
 5fc:	02 c0       	rjmp	.+4      	; 0x602 <GPIO_setupPortDirection+0xc>
		{
			DDRA_REG = direction;
 5fe:	61 b9       	out	0x01, r22	; 1
 600:	08 95       	ret
		}
		else if(port_num == PORTB_ID)
 602:	81 30       	cpi	r24, 0x01	; 1
 604:	11 f4       	brne	.+4      	; 0x60a <GPIO_setupPortDirection+0x14>
		{
			DDRB_REG = direction;
 606:	64 b9       	out	0x04, r22	; 4
 608:	08 95       	ret
		}
		else if(port_num == PORTC_ID)
 60a:	82 30       	cpi	r24, 0x02	; 2
 60c:	11 f4       	brne	.+4      	; 0x612 <GPIO_setupPortDirection+0x1c>
		{
			DDRC_REG = direction;
 60e:	67 b9       	out	0x07, r22	; 7
 610:	08 95       	ret
		}
		else if(port_num == PORTD_ID)
 612:	83 30       	cpi	r24, 0x03	; 3
 614:	11 f4       	brne	.+4      	; 0x61a <GPIO_setupPortDirection+0x24>
		{
			DDRD_REG = direction;
 616:	6a b9       	out	0x0a, r22	; 10
 618:	08 95       	ret
		}
		else if(port_num == PORTE_ID)
 61a:	84 30       	cpi	r24, 0x04	; 4
 61c:	11 f4       	brne	.+4      	; 0x622 <GPIO_setupPortDirection+0x2c>
		{
			DDRE_REG = direction;
 61e:	6d b9       	out	0x0d, r22	; 13
 620:	08 95       	ret
		}
		else if(port_num == PORTF_ID)
 622:	85 30       	cpi	r24, 0x05	; 5
 624:	11 f4       	brne	.+4      	; 0x62a <GPIO_setupPortDirection+0x34>
		{
			DDRF_REG = direction;
 626:	60 bb       	out	0x10, r22	; 16
 628:	08 95       	ret
		}
		else if(port_num==PORTG_ID)
 62a:	86 30       	cpi	r24, 0x06	; 6
 62c:	11 f4       	brne	.+4      	; 0x632 <GPIO_setupPortDirection+0x3c>
		{
			DDRG_REG = direction;
 62e:	63 bb       	out	0x13, r22	; 19
 630:	08 95       	ret
		}
		else if(port_num == PORTH_ID)
 632:	87 30       	cpi	r24, 0x07	; 7
 634:	19 f4       	brne	.+6      	; 0x63c <GPIO_setupPortDirection+0x46>
		{
			DDRH_REG = direction;
 636:	60 93 01 01 	sts	0x0101, r22	; 0x800101 <__TEXT_REGION_LENGTH__+0x7c0101>
 63a:	08 95       	ret
		}
		else if(port_num == PORTJ_ID)
 63c:	88 30       	cpi	r24, 0x08	; 8
 63e:	19 f4       	brne	.+6      	; 0x646 <GPIO_setupPortDirection+0x50>
		{
			DDRJ_REG = direction;
 640:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <__TEXT_REGION_LENGTH__+0x7c0104>
 644:	08 95       	ret
		}
		else if(port_num == PORTK_ID)
 646:	89 30       	cpi	r24, 0x09	; 9
 648:	19 f4       	brne	.+6      	; 0x650 <GPIO_setupPortDirection+0x5a>
		{
			DDRK_REG = direction;
 64a:	60 93 07 01 	sts	0x0107, r22	; 0x800107 <__TEXT_REGION_LENGTH__+0x7c0107>
 64e:	08 95       	ret
		}
		else if(port_num == PORTL_ID)
 650:	8a 30       	cpi	r24, 0x0A	; 10
 652:	11 f4       	brne	.+4      	; 0x658 <GPIO_setupPortDirection+0x62>
		{
			DDRL_REG = direction;
 654:	60 93 0a 01 	sts	0x010A, r22	; 0x80010a <__TEXT_REGION_LENGTH__+0x7c010a>
 658:	08 95       	ret

0000065a <GPIO_writePort>:
	
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
 65a:	8b 30       	cpi	r24, 0x0B	; 11
 65c:	78 f5       	brcc	.+94     	; 0x6bc <GPIO_writePort+0x62>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		if(port_num == PORTA_ID)
 65e:	81 11       	cpse	r24, r1
 660:	02 c0       	rjmp	.+4      	; 0x666 <GPIO_writePort+0xc>
		{
			PORTA_REG = value;
 662:	62 b9       	out	0x02, r22	; 2
 664:	08 95       	ret
		}
		else if(port_num == PORTB_ID)
 666:	81 30       	cpi	r24, 0x01	; 1
 668:	11 f4       	brne	.+4      	; 0x66e <GPIO_writePort+0x14>
		{
			PORTB_REG = value;
 66a:	65 b9       	out	0x05, r22	; 5
 66c:	08 95       	ret
		}
		else if(port_num == PORTC_ID)
 66e:	82 30       	cpi	r24, 0x02	; 2
 670:	11 f4       	brne	.+4      	; 0x676 <GPIO_writePort+0x1c>
		{
			PORTC_REG = value;
 672:	68 b9       	out	0x08, r22	; 8
 674:	08 95       	ret
		}
		else if(port_num == PORTD_ID)
 676:	83 30       	cpi	r24, 0x03	; 3
 678:	11 f4       	brne	.+4      	; 0x67e <GPIO_writePort+0x24>
		{
			PORTD_REG = value;
 67a:	6b b9       	out	0x0b, r22	; 11
 67c:	08 95       	ret
		}
		else if(port_num == PORTE_ID)
 67e:	84 30       	cpi	r24, 0x04	; 4
 680:	11 f4       	brne	.+4      	; 0x686 <GPIO_writePort+0x2c>
		{
			PORTE_REG = value;
 682:	6e b9       	out	0x0e, r22	; 14
 684:	08 95       	ret
		}
		else if(port_num == PORTF_ID)
 686:	85 30       	cpi	r24, 0x05	; 5
 688:	11 f4       	brne	.+4      	; 0x68e <GPIO_writePort+0x34>
		{
			PORTF_REG = value;
 68a:	61 bb       	out	0x11, r22	; 17
 68c:	08 95       	ret
		}
		else if(port_num == PORTG_ID)
 68e:	86 30       	cpi	r24, 0x06	; 6
 690:	11 f4       	brne	.+4      	; 0x696 <GPIO_writePort+0x3c>
		{
			PORTG_REG = value;
 692:	64 bb       	out	0x14, r22	; 20
 694:	08 95       	ret
		}
		else if(port_num == PORTH_ID)
 696:	87 30       	cpi	r24, 0x07	; 7
 698:	19 f4       	brne	.+6      	; 0x6a0 <GPIO_writePort+0x46>
		{
			PORTH_REG = value;
 69a:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <__TEXT_REGION_LENGTH__+0x7c0102>
 69e:	08 95       	ret
		}
		else if(port_num == PORTJ_ID)
 6a0:	88 30       	cpi	r24, 0x08	; 8
 6a2:	19 f4       	brne	.+6      	; 0x6aa <GPIO_writePort+0x50>
		{
			PORTJ_REG = value;
 6a4:	60 93 05 01 	sts	0x0105, r22	; 0x800105 <__TEXT_REGION_LENGTH__+0x7c0105>
 6a8:	08 95       	ret
		}
		else if(port_num == PORTK_ID)
 6aa:	89 30       	cpi	r24, 0x09	; 9
 6ac:	19 f4       	brne	.+6      	; 0x6b4 <GPIO_writePort+0x5a>
		{
			PORTK_REG = value;
 6ae:	60 93 08 01 	sts	0x0108, r22	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
 6b2:	08 95       	ret
		}
		else if(port_num == PORTL_ID)
 6b4:	8a 30       	cpi	r24, 0x0A	; 10
 6b6:	11 f4       	brne	.+4      	; 0x6bc <GPIO_writePort+0x62>
		{
			PORTL_REG = value;
 6b8:	60 93 0b 01 	sts	0x010B, r22	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>
 6bc:	08 95       	ret

000006be <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
 6be:	cf 93       	push	r28
 6c0:	c8 2f       	mov	r28, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
 6c2:	40 e0       	ldi	r20, 0x00	; 0
 6c4:	64 e0       	ldi	r22, 0x04	; 4
 6c6:	83 e0       	ldi	r24, 0x03	; 3
 6c8:	57 de       	rcall	.-850    	; 0x378 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
 6ca:	40 e0       	ldi	r20, 0x00	; 0
 6cc:	65 e0       	ldi	r22, 0x05	; 5
 6ce:	83 e0       	ldi	r24, 0x03	; 3
 6d0:	53 de       	rcall	.-858    	; 0x378 <GPIO_writePin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6d2:	89 ef       	ldi	r24, 0xF9	; 249
 6d4:	90 e0       	ldi	r25, 0x00	; 0
 6d6:	01 97       	sbiw	r24, 0x01	; 1
 6d8:	f1 f7       	brne	.-4      	; 0x6d6 <LCD_sendCommand+0x18>
 6da:	00 c0       	rjmp	.+0      	; 0x6dc <LCD_sendCommand+0x1e>
 6dc:	00 00       	nop
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
 6de:	6c 2f       	mov	r22, r28
 6e0:	82 e0       	ldi	r24, 0x02	; 2
 6e2:	bb df       	rcall	.-138    	; 0x65a <GPIO_writePort>
 6e4:	89 ef       	ldi	r24, 0xF9	; 249
 6e6:	90 e0       	ldi	r25, 0x00	; 0
 6e8:	01 97       	sbiw	r24, 0x01	; 1
 6ea:	f1 f7       	brne	.-4      	; 0x6e8 <LCD_sendCommand+0x2a>
 6ec:	00 c0       	rjmp	.+0      	; 0x6ee <LCD_sendCommand+0x30>
 6ee:	00 00       	nop
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
 6f0:	41 e0       	ldi	r20, 0x01	; 1
 6f2:	66 e0       	ldi	r22, 0x06	; 6
 6f4:	83 e0       	ldi	r24, 0x03	; 3
 6f6:	40 de       	rcall	.-896    	; 0x378 <GPIO_writePin>
 6f8:	89 ef       	ldi	r24, 0xF9	; 249
 6fa:	90 e0       	ldi	r25, 0x00	; 0
 6fc:	01 97       	sbiw	r24, 0x01	; 1
 6fe:	f1 f7       	brne	.-4      	; 0x6fc <LCD_sendCommand+0x3e>
 700:	00 c0       	rjmp	.+0      	; 0x702 <LCD_sendCommand+0x44>
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
 702:	00 00       	nop
 704:	40 e0       	ldi	r20, 0x00	; 0
 706:	66 e0       	ldi	r22, 0x06	; 6
 708:	83 e0       	ldi	r24, 0x03	; 3
 70a:	36 de       	rcall	.-916    	; 0x378 <GPIO_writePin>
 70c:	89 ef       	ldi	r24, 0xF9	; 249
 70e:	90 e0       	ldi	r25, 0x00	; 0
 710:	01 97       	sbiw	r24, 0x01	; 1
 712:	f1 f7       	brne	.-4      	; 0x710 <LCD_sendCommand+0x52>
 714:	00 c0       	rjmp	.+0      	; 0x716 <LCD_sendCommand+0x58>
 716:	00 00       	nop
	_delay_ms(1); /* delay for processing Th = 13ns */
}
 718:	cf 91       	pop	r28
 71a:	08 95       	ret

0000071c <LCD_init>:
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
 71c:	41 e0       	ldi	r20, 0x01	; 1
 71e:	64 e0       	ldi	r22, 0x04	; 4
 720:	83 e0       	ldi	r24, 0x03	; 3
 722:	eb dc       	rcall	.-1578   	; 0xfa <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
 724:	41 e0       	ldi	r20, 0x01	; 1
 726:	65 e0       	ldi	r22, 0x05	; 5
 728:	83 e0       	ldi	r24, 0x03	; 3
 72a:	e7 dc       	rcall	.-1586   	; 0xfa <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
 72c:	41 e0       	ldi	r20, 0x01	; 1
 72e:	66 e0       	ldi	r22, 0x06	; 6
 730:	83 e0       	ldi	r24, 0x03	; 3
 732:	e3 dc       	rcall	.-1594   	; 0xfa <GPIO_setupPinDirection>

	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
 734:	6f ef       	ldi	r22, 0xFF	; 255
 736:	82 e0       	ldi	r24, 0x02	; 2
 738:	5e df       	rcall	.-324    	; 0x5f6 <GPIO_setupPortDirection>

	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
 73a:	88 e3       	ldi	r24, 0x38	; 56
 73c:	c0 df       	rcall	.-128    	; 0x6be <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
 73e:	8c e0       	ldi	r24, 0x0C	; 12
 740:	be df       	rcall	.-132    	; 0x6be <LCD_sendCommand>
 742:	81 e0       	ldi	r24, 0x01	; 1
	
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
 744:	bc cf       	rjmp	.-136    	; 0x6be <LCD_sendCommand>
 746:	08 95       	ret

00000748 <LCD_displayCharacter>:
 748:	cf 93       	push	r28
 74a:	c8 2f       	mov	r28, r24
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
 74c:	41 e0       	ldi	r20, 0x01	; 1
 74e:	64 e0       	ldi	r22, 0x04	; 4
 750:	83 e0       	ldi	r24, 0x03	; 3
 752:	12 de       	rcall	.-988    	; 0x378 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
 754:	40 e0       	ldi	r20, 0x00	; 0
 756:	65 e0       	ldi	r22, 0x05	; 5
 758:	83 e0       	ldi	r24, 0x03	; 3
 75a:	0e de       	rcall	.-996    	; 0x378 <GPIO_writePin>
 75c:	89 ef       	ldi	r24, 0xF9	; 249
 75e:	90 e0       	ldi	r25, 0x00	; 0
 760:	01 97       	sbiw	r24, 0x01	; 1
 762:	f1 f7       	brne	.-4      	; 0x760 <LCD_displayCharacter+0x18>
 764:	00 c0       	rjmp	.+0      	; 0x766 <LCD_displayCharacter+0x1e>
 766:	00 00       	nop
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
 768:	41 e0       	ldi	r20, 0x01	; 1
 76a:	66 e0       	ldi	r22, 0x06	; 6
 76c:	83 e0       	ldi	r24, 0x03	; 3
 76e:	04 de       	rcall	.-1016   	; 0x378 <GPIO_writePin>
 770:	89 ef       	ldi	r24, 0xF9	; 249
 772:	90 e0       	ldi	r25, 0x00	; 0
 774:	01 97       	sbiw	r24, 0x01	; 1
 776:	f1 f7       	brne	.-4      	; 0x774 <LCD_displayCharacter+0x2c>
 778:	00 c0       	rjmp	.+0      	; 0x77a <LCD_displayCharacter+0x32>
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
 77a:	00 00       	nop
 77c:	6c 2f       	mov	r22, r28
 77e:	82 e0       	ldi	r24, 0x02	; 2
 780:	6c df       	rcall	.-296    	; 0x65a <GPIO_writePort>
 782:	89 ef       	ldi	r24, 0xF9	; 249
 784:	90 e0       	ldi	r25, 0x00	; 0
 786:	01 97       	sbiw	r24, 0x01	; 1
 788:	f1 f7       	brne	.-4      	; 0x786 <LCD_displayCharacter+0x3e>
 78a:	00 c0       	rjmp	.+0      	; 0x78c <LCD_displayCharacter+0x44>
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
 78c:	00 00       	nop
 78e:	40 e0       	ldi	r20, 0x00	; 0
 790:	66 e0       	ldi	r22, 0x06	; 6
 792:	83 e0       	ldi	r24, 0x03	; 3
 794:	f1 dd       	rcall	.-1054   	; 0x378 <GPIO_writePin>
 796:	89 ef       	ldi	r24, 0xF9	; 249
 798:	90 e0       	ldi	r25, 0x00	; 0
 79a:	01 97       	sbiw	r24, 0x01	; 1
 79c:	f1 f7       	brne	.-4      	; 0x79a <LCD_displayCharacter+0x52>
 79e:	00 c0       	rjmp	.+0      	; 0x7a0 <LCD_displayCharacter+0x58>
 7a0:	00 00       	nop
	_delay_ms(1); /* delay for processing Th = 13ns */
}
 7a2:	cf 91       	pop	r28
 7a4:	08 95       	ret

000007a6 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
 7a6:	0f 93       	push	r16
 7a8:	1f 93       	push	r17
 7aa:	cf 93       	push	r28
 7ac:	8c 01       	movw	r16, r24
	uint8 i = 0;
 7ae:	c0 e0       	ldi	r28, 0x00	; 0
	while(Str[i] != '\0')
 7b0:	02 c0       	rjmp	.+4      	; 0x7b6 <LCD_displayString+0x10>
	{
		LCD_displayCharacter(Str[i]);
 7b2:	ca df       	rcall	.-108    	; 0x748 <LCD_displayCharacter>
		i++;
 7b4:	cf 5f       	subi	r28, 0xFF	; 255
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
 7b6:	f8 01       	movw	r30, r16
 7b8:	ec 0f       	add	r30, r28
 7ba:	f1 1d       	adc	r31, r1
 7bc:	80 81       	ld	r24, Z
 7be:	81 11       	cpse	r24, r1
 7c0:	f8 cf       	rjmp	.-16     	; 0x7b2 <LCD_displayString+0xc>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
 7c2:	cf 91       	pop	r28
 7c4:	1f 91       	pop	r17
 7c6:	0f 91       	pop	r16
 7c8:	08 95       	ret

000007ca <LCD_moveCursor>:
void LCD_moveCursor(uint8 row,uint8 col)
{
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
 7ca:	81 30       	cpi	r24, 0x01	; 1
 7cc:	31 f0       	breq	.+12     	; 0x7da <LCD_moveCursor+0x10>
 7ce:	70 f0       	brcs	.+28     	; 0x7ec <LCD_moveCursor+0x22>
 7d0:	82 30       	cpi	r24, 0x02	; 2
 7d2:	31 f0       	breq	.+12     	; 0x7e0 <LCD_moveCursor+0x16>
 7d4:	83 30       	cpi	r24, 0x03	; 3
 7d6:	39 f0       	breq	.+14     	; 0x7e6 <LCD_moveCursor+0x1c>
 7d8:	0a c0       	rjmp	.+20     	; 0x7ee <LCD_moveCursor+0x24>
	{
		case 0:
			lcd_memory_address=col;
				break;
		case 1:
			lcd_memory_address=col+0x40;
 7da:	90 e4       	ldi	r25, 0x40	; 64
 7dc:	96 0f       	add	r25, r22
				break;
 7de:	07 c0       	rjmp	.+14     	; 0x7ee <LCD_moveCursor+0x24>
		case 2:
			lcd_memory_address=col+0x14;
 7e0:	94 e1       	ldi	r25, 0x14	; 20
 7e2:	96 0f       	add	r25, r22
				break;
 7e4:	04 c0       	rjmp	.+8      	; 0x7ee <LCD_moveCursor+0x24>
		case 3:
			lcd_memory_address=col+0x54;
 7e6:	94 e5       	ldi	r25, 0x54	; 84
 7e8:	96 0f       	add	r25, r22
				break;
 7ea:	01 c0       	rjmp	.+2      	; 0x7ee <LCD_moveCursor+0x24>
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
	{
		case 0:
			lcd_memory_address=col;
 7ec:	96 2f       	mov	r25, r22
		case 3:
			lcd_memory_address=col+0x54;
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
 7ee:	89 2f       	mov	r24, r25
 7f0:	80 68       	ori	r24, 0x80	; 128
 7f2:	65 cf       	rjmp	.-310    	; 0x6be <LCD_sendCommand>
 7f4:	08 95       	ret

000007f6 <main>:
#include "lcd.h"


#define MC2_READY 0x10

int main() {
 7f6:	cf 93       	push	r28
 7f8:	df 93       	push	r29
 7fa:	cd b7       	in	r28, 0x3d	; 61
 7fc:	de b7       	in	r29, 0x3e	; 62
 7fe:	2f 97       	sbiw	r28, 0x0f	; 15
 800:	0f b6       	in	r0, 0x3f	; 63
 802:	f8 94       	cli
 804:	de bf       	out	0x3e, r29	; 62
 806:	0f be       	out	0x3f, r0	; 63
 808:	cd bf       	out	0x3d, r28	; 61
	UART0_init();
 80a:	0b d0       	rcall	.+22     	; 0x822 <UART0_init>
	LCD_init();
 80c:	87 df       	rcall	.-242    	; 0x71c <LCD_init>
 80e:	ce 01       	movw	r24, r28
	//LCD_displayCharacter(str[0]);
	while(1)
	{
		
		
		UART0_receiveString(str);
 810:	01 96       	adiw	r24, 0x01	; 1
 812:	27 d0       	rcall	.+78     	; 0x862 <UART0_receiveString>
 814:	60 e0       	ldi	r22, 0x00	; 0
		LCD_moveCursor(2,0);
 816:	82 e0       	ldi	r24, 0x02	; 2
 818:	d8 df       	rcall	.-80     	; 0x7ca <LCD_moveCursor>
 81a:	ce 01       	movw	r24, r28
		LCD_displayString(str);
 81c:	01 96       	adiw	r24, 0x01	; 1
 81e:	c3 df       	rcall	.-122    	; 0x7a6 <LCD_displayString>
 820:	f6 cf       	rjmp	.-20     	; 0x80e <main+0x18>

00000822 <UART0_init>:
 822:	82 e0       	ldi	r24, 0x02	; 2
 824:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
	{
		UART0_Send(Str[i]);
		i++;
		_delay_ms(500);
	}
}
 828:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
 82c:	85 ec       	ldi	r24, 0xC5	; 197
 82e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
 832:	e2 ec       	ldi	r30, 0xC2	; 194
 834:	f0 e0       	ldi	r31, 0x00	; 0
 836:	80 81       	ld	r24, Z
 838:	88 60       	ori	r24, 0x08	; 8
 83a:	80 83       	st	Z, r24
 83c:	80 81       	ld	r24, Z
 83e:	86 60       	ori	r24, 0x06	; 6
 840:	80 83       	st	Z, r24
 842:	e1 ec       	ldi	r30, 0xC1	; 193
 844:	f0 e0       	ldi	r31, 0x00	; 0
 846:	80 81       	ld	r24, Z
 848:	80 61       	ori	r24, 0x10	; 16
 84a:	80 83       	st	Z, r24
 84c:	80 81       	ld	r24, Z
 84e:	88 60       	ori	r24, 0x08	; 8
 850:	80 83       	st	Z, r24
 852:	08 95       	ret

00000854 <UART0_ReceiveData>:
 854:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 858:	88 23       	and	r24, r24
 85a:	e4 f7       	brge	.-8      	; 0x854 <UART0_ReceiveData>
 85c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 860:	08 95       	ret

00000862 <UART0_receiveString>:
 
 void UART0_receiveString(uint8 *Str)
 {
 862:	ef 92       	push	r14
 864:	ff 92       	push	r15
 866:	0f 93       	push	r16
 868:	1f 93       	push	r17
 86a:	cf 93       	push	r28
 86c:	8c 01       	movw	r16, r24
	 uint8 i=0;
	
	 Str[i]=UART0_ReceiveData();
 86e:	f2 df       	rcall	.-28     	; 0x854 <UART0_ReceiveData>
 870:	f8 01       	movw	r30, r16
 872:	80 83       	st	Z, r24
	}
}
 
 void UART0_receiveString(uint8 *Str)
 {
	 uint8 i=0;
 874:	c0 e0       	ldi	r28, 0x00	; 0
	
	 Str[i]=UART0_ReceiveData();
	 while(Str[i] != '\0')
 876:	07 c0       	rjmp	.+14     	; 0x886 <UART0_receiveString+0x24>
	 {
		i++;
 878:	cf 5f       	subi	r28, 0xFF	; 255
 		Str[i]=UART0_ReceiveData(); 	
 87a:	78 01       	movw	r14, r16
 87c:	ec 0e       	add	r14, r28
 87e:	f1 1c       	adc	r15, r1
 880:	e9 df       	rcall	.-46     	; 0x854 <UART0_ReceiveData>
 882:	f7 01       	movw	r30, r14
 884:	80 83       	st	Z, r24
 void UART0_receiveString(uint8 *Str)
 {
	 uint8 i=0;
	
	 Str[i]=UART0_ReceiveData();
	 while(Str[i] != '\0')
 886:	f8 01       	movw	r30, r16
 888:	ec 0f       	add	r30, r28
 88a:	f1 1d       	adc	r31, r1
 88c:	80 81       	ld	r24, Z
 88e:	81 11       	cpse	r24, r1
 890:	f3 cf       	rjmp	.-26     	; 0x878 <UART0_receiveString+0x16>
	 {
		i++;
 		Str[i]=UART0_ReceiveData(); 	
	 }
	  
	 Str[i]='\0';
 892:	10 82       	st	Z, r1
	 
	  
 }
 894:	cf 91       	pop	r28
 896:	1f 91       	pop	r17
 898:	0f 91       	pop	r16
 89a:	ff 90       	pop	r15
 89c:	ef 90       	pop	r14
 89e:	08 95       	ret

000008a0 <_exit>:
 8a0:	f8 94       	cli

000008a2 <__stop_program>:
 8a2:	ff cf       	rjmp	.-2      	; 0x8a2 <__stop_program>

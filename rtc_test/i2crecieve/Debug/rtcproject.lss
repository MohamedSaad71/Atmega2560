
rtcproject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800200  00000d92  00000e26  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d92  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800222  00800222  00000e48  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000e48  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ea4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002c8  00000000  00000000  00000ee4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002496  00000000  00000000  000011ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012c8  00000000  00000000  00003642  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001619  00000000  00000000  0000490a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000578  00000000  00000000  00005f24  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c37  00000000  00000000  0000649c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001324  00000000  00000000  000070d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000268  00000000  00000000  000083f7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e2 e9       	ldi	r30, 0x92	; 146
  fc:	fd e0       	ldi	r31, 0x0D	; 13
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a2 32       	cpi	r26, 0x22	; 34
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a2 e2       	ldi	r26, 0x22	; 34
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a0 33       	cpi	r26, 0x30	; 48
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	b8 d1       	rcall	.+880    	; 0x490 <main>
 120:	36 c6       	rjmp	.+3180   	; 0xd8e <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <GPIO_writePin>:
		{
			DDRK_REG = direction;
		}
		else if(port_num == PORTL_ID)
		{
			DDRL_REG = direction;
 124:	68 30       	cpi	r22, 0x08	; 8
 126:	08 f0       	brcs	.+2      	; 0x12a <GPIO_writePin+0x6>
 128:	3b c1       	rjmp	.+630    	; 0x3a0 <GPIO_writePin+0x27c>
 12a:	8b 30       	cpi	r24, 0x0B	; 11
 12c:	08 f0       	brcs	.+2      	; 0x130 <GPIO_writePin+0xc>
 12e:	38 c1       	rjmp	.+624    	; 0x3a0 <GPIO_writePin+0x27c>
 130:	81 11       	cpse	r24, r1
 132:	19 c0       	rjmp	.+50     	; 0x166 <GPIO_writePin+0x42>
 134:	41 30       	cpi	r20, 0x01	; 1
 136:	59 f4       	brne	.+22     	; 0x14e <GPIO_writePin+0x2a>
 138:	22 b1       	in	r18, 0x02	; 2
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	02 c0       	rjmp	.+4      	; 0x144 <GPIO_writePin+0x20>
 140:	88 0f       	add	r24, r24
 142:	99 1f       	adc	r25, r25
 144:	6a 95       	dec	r22
 146:	e2 f7       	brpl	.-8      	; 0x140 <GPIO_writePin+0x1c>
 148:	82 2b       	or	r24, r18
 14a:	82 b9       	out	0x02, r24	; 2
 14c:	08 95       	ret
 14e:	22 b1       	in	r18, 0x02	; 2
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	02 c0       	rjmp	.+4      	; 0x15a <GPIO_writePin+0x36>
 156:	88 0f       	add	r24, r24
 158:	99 1f       	adc	r25, r25
 15a:	6a 95       	dec	r22
 15c:	e2 f7       	brpl	.-8      	; 0x156 <GPIO_writePin+0x32>
 15e:	80 95       	com	r24
 160:	82 23       	and	r24, r18
 162:	82 b9       	out	0x02, r24	; 2
 164:	08 95       	ret
 166:	81 30       	cpi	r24, 0x01	; 1
 168:	c9 f4       	brne	.+50     	; 0x19c <GPIO_writePin+0x78>
 16a:	41 30       	cpi	r20, 0x01	; 1
 16c:	59 f4       	brne	.+22     	; 0x184 <GPIO_writePin+0x60>
 16e:	25 b1       	in	r18, 0x05	; 5
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	02 c0       	rjmp	.+4      	; 0x17a <GPIO_writePin+0x56>
 176:	88 0f       	add	r24, r24
 178:	99 1f       	adc	r25, r25
 17a:	6a 95       	dec	r22
 17c:	e2 f7       	brpl	.-8      	; 0x176 <GPIO_writePin+0x52>
 17e:	82 2b       	or	r24, r18
 180:	85 b9       	out	0x05, r24	; 5
 182:	08 95       	ret
 184:	25 b1       	in	r18, 0x05	; 5
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	02 c0       	rjmp	.+4      	; 0x190 <GPIO_writePin+0x6c>
 18c:	88 0f       	add	r24, r24
 18e:	99 1f       	adc	r25, r25
 190:	6a 95       	dec	r22
 192:	e2 f7       	brpl	.-8      	; 0x18c <GPIO_writePin+0x68>
 194:	80 95       	com	r24
 196:	82 23       	and	r24, r18
 198:	85 b9       	out	0x05, r24	; 5
 19a:	08 95       	ret
 19c:	82 30       	cpi	r24, 0x02	; 2
 19e:	c9 f4       	brne	.+50     	; 0x1d2 <GPIO_writePin+0xae>
 1a0:	41 30       	cpi	r20, 0x01	; 1
 1a2:	59 f4       	brne	.+22     	; 0x1ba <GPIO_writePin+0x96>
 1a4:	28 b1       	in	r18, 0x08	; 8
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <GPIO_writePin+0x8c>
 1ac:	88 0f       	add	r24, r24
 1ae:	99 1f       	adc	r25, r25
 1b0:	6a 95       	dec	r22
 1b2:	e2 f7       	brpl	.-8      	; 0x1ac <GPIO_writePin+0x88>
 1b4:	82 2b       	or	r24, r18
 1b6:	88 b9       	out	0x08, r24	; 8
 1b8:	08 95       	ret
 1ba:	28 b1       	in	r18, 0x08	; 8
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <GPIO_writePin+0xa2>
 1c2:	88 0f       	add	r24, r24
 1c4:	99 1f       	adc	r25, r25
 1c6:	6a 95       	dec	r22
 1c8:	e2 f7       	brpl	.-8      	; 0x1c2 <GPIO_writePin+0x9e>
 1ca:	80 95       	com	r24
 1cc:	82 23       	and	r24, r18
 1ce:	88 b9       	out	0x08, r24	; 8
 1d0:	08 95       	ret
 1d2:	83 30       	cpi	r24, 0x03	; 3
 1d4:	c9 f4       	brne	.+50     	; 0x208 <GPIO_writePin+0xe4>
 1d6:	41 30       	cpi	r20, 0x01	; 1
 1d8:	59 f4       	brne	.+22     	; 0x1f0 <GPIO_writePin+0xcc>
 1da:	2b b1       	in	r18, 0x0b	; 11
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <GPIO_writePin+0xc2>
 1e2:	88 0f       	add	r24, r24
 1e4:	99 1f       	adc	r25, r25
 1e6:	6a 95       	dec	r22
 1e8:	e2 f7       	brpl	.-8      	; 0x1e2 <GPIO_writePin+0xbe>
 1ea:	82 2b       	or	r24, r18
 1ec:	8b b9       	out	0x0b, r24	; 11
 1ee:	08 95       	ret
 1f0:	2b b1       	in	r18, 0x0b	; 11
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	02 c0       	rjmp	.+4      	; 0x1fc <GPIO_writePin+0xd8>
 1f8:	88 0f       	add	r24, r24
 1fa:	99 1f       	adc	r25, r25
 1fc:	6a 95       	dec	r22
 1fe:	e2 f7       	brpl	.-8      	; 0x1f8 <GPIO_writePin+0xd4>
 200:	80 95       	com	r24
 202:	82 23       	and	r24, r18
 204:	8b b9       	out	0x0b, r24	; 11
 206:	08 95       	ret
 208:	84 30       	cpi	r24, 0x04	; 4
 20a:	c9 f4       	brne	.+50     	; 0x23e <GPIO_writePin+0x11a>
 20c:	41 30       	cpi	r20, 0x01	; 1
 20e:	59 f4       	brne	.+22     	; 0x226 <GPIO_writePin+0x102>
 210:	2e b1       	in	r18, 0x0e	; 14
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	02 c0       	rjmp	.+4      	; 0x21c <GPIO_writePin+0xf8>
 218:	88 0f       	add	r24, r24
 21a:	99 1f       	adc	r25, r25
 21c:	6a 95       	dec	r22
 21e:	e2 f7       	brpl	.-8      	; 0x218 <GPIO_writePin+0xf4>
 220:	82 2b       	or	r24, r18
 222:	8e b9       	out	0x0e, r24	; 14
 224:	08 95       	ret
 226:	2e b1       	in	r18, 0x0e	; 14
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	02 c0       	rjmp	.+4      	; 0x232 <GPIO_writePin+0x10e>
 22e:	88 0f       	add	r24, r24
 230:	99 1f       	adc	r25, r25
 232:	6a 95       	dec	r22
 234:	e2 f7       	brpl	.-8      	; 0x22e <GPIO_writePin+0x10a>
 236:	80 95       	com	r24
 238:	82 23       	and	r24, r18
 23a:	8e b9       	out	0x0e, r24	; 14
 23c:	08 95       	ret
 23e:	85 30       	cpi	r24, 0x05	; 5
 240:	c9 f4       	brne	.+50     	; 0x274 <GPIO_writePin+0x150>
 242:	41 30       	cpi	r20, 0x01	; 1
 244:	59 f4       	brne	.+22     	; 0x25c <GPIO_writePin+0x138>
 246:	21 b3       	in	r18, 0x11	; 17
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	02 c0       	rjmp	.+4      	; 0x252 <GPIO_writePin+0x12e>
 24e:	88 0f       	add	r24, r24
 250:	99 1f       	adc	r25, r25
 252:	6a 95       	dec	r22
 254:	e2 f7       	brpl	.-8      	; 0x24e <GPIO_writePin+0x12a>
 256:	82 2b       	or	r24, r18
 258:	81 bb       	out	0x11, r24	; 17
 25a:	08 95       	ret
 25c:	21 b3       	in	r18, 0x11	; 17
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	02 c0       	rjmp	.+4      	; 0x268 <GPIO_writePin+0x144>
 264:	88 0f       	add	r24, r24
 266:	99 1f       	adc	r25, r25
 268:	6a 95       	dec	r22
 26a:	e2 f7       	brpl	.-8      	; 0x264 <GPIO_writePin+0x140>
 26c:	80 95       	com	r24
 26e:	82 23       	and	r24, r18
 270:	81 bb       	out	0x11, r24	; 17
 272:	08 95       	ret
 274:	86 30       	cpi	r24, 0x06	; 6
 276:	c9 f4       	brne	.+50     	; 0x2aa <GPIO_writePin+0x186>
 278:	41 30       	cpi	r20, 0x01	; 1
 27a:	59 f4       	brne	.+22     	; 0x292 <GPIO_writePin+0x16e>
 27c:	24 b3       	in	r18, 0x14	; 20
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	02 c0       	rjmp	.+4      	; 0x288 <GPIO_writePin+0x164>
 284:	88 0f       	add	r24, r24
 286:	99 1f       	adc	r25, r25
 288:	6a 95       	dec	r22
 28a:	e2 f7       	brpl	.-8      	; 0x284 <GPIO_writePin+0x160>
 28c:	82 2b       	or	r24, r18
 28e:	84 bb       	out	0x14, r24	; 20
 290:	08 95       	ret
 292:	24 b3       	in	r18, 0x14	; 20
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	02 c0       	rjmp	.+4      	; 0x29e <GPIO_writePin+0x17a>
 29a:	88 0f       	add	r24, r24
 29c:	99 1f       	adc	r25, r25
 29e:	6a 95       	dec	r22
 2a0:	e2 f7       	brpl	.-8      	; 0x29a <GPIO_writePin+0x176>
 2a2:	80 95       	com	r24
 2a4:	82 23       	and	r24, r18
 2a6:	84 bb       	out	0x14, r24	; 20
 2a8:	08 95       	ret
 2aa:	87 30       	cpi	r24, 0x07	; 7
 2ac:	e9 f4       	brne	.+58     	; 0x2e8 <GPIO_writePin+0x1c4>
 2ae:	41 30       	cpi	r20, 0x01	; 1
 2b0:	69 f4       	brne	.+26     	; 0x2cc <GPIO_writePin+0x1a8>
 2b2:	e2 e0       	ldi	r30, 0x02	; 2
 2b4:	f1 e0       	ldi	r31, 0x01	; 1
 2b6:	20 81       	ld	r18, Z
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	02 c0       	rjmp	.+4      	; 0x2c2 <GPIO_writePin+0x19e>
 2be:	88 0f       	add	r24, r24
 2c0:	99 1f       	adc	r25, r25
 2c2:	6a 95       	dec	r22
 2c4:	e2 f7       	brpl	.-8      	; 0x2be <GPIO_writePin+0x19a>
 2c6:	82 2b       	or	r24, r18
 2c8:	80 83       	st	Z, r24
 2ca:	08 95       	ret
 2cc:	e2 e0       	ldi	r30, 0x02	; 2
 2ce:	f1 e0       	ldi	r31, 0x01	; 1
 2d0:	20 81       	ld	r18, Z
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	02 c0       	rjmp	.+4      	; 0x2dc <GPIO_writePin+0x1b8>
 2d8:	88 0f       	add	r24, r24
 2da:	99 1f       	adc	r25, r25
 2dc:	6a 95       	dec	r22
 2de:	e2 f7       	brpl	.-8      	; 0x2d8 <GPIO_writePin+0x1b4>
 2e0:	80 95       	com	r24
 2e2:	82 23       	and	r24, r18
 2e4:	80 83       	st	Z, r24
 2e6:	08 95       	ret
 2e8:	88 30       	cpi	r24, 0x08	; 8
 2ea:	e9 f4       	brne	.+58     	; 0x326 <GPIO_writePin+0x202>
 2ec:	41 30       	cpi	r20, 0x01	; 1
 2ee:	69 f4       	brne	.+26     	; 0x30a <GPIO_writePin+0x1e6>
 2f0:	e5 e0       	ldi	r30, 0x05	; 5
 2f2:	f1 e0       	ldi	r31, 0x01	; 1
 2f4:	20 81       	ld	r18, Z
 2f6:	81 e0       	ldi	r24, 0x01	; 1
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	02 c0       	rjmp	.+4      	; 0x300 <GPIO_writePin+0x1dc>
 2fc:	88 0f       	add	r24, r24
 2fe:	99 1f       	adc	r25, r25
 300:	6a 95       	dec	r22
 302:	e2 f7       	brpl	.-8      	; 0x2fc <GPIO_writePin+0x1d8>
 304:	82 2b       	or	r24, r18
 306:	80 83       	st	Z, r24
 308:	08 95       	ret
 30a:	eb e0       	ldi	r30, 0x0B	; 11
 30c:	f1 e0       	ldi	r31, 0x01	; 1
 30e:	20 81       	ld	r18, Z
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	02 c0       	rjmp	.+4      	; 0x31a <GPIO_writePin+0x1f6>
 316:	88 0f       	add	r24, r24
 318:	99 1f       	adc	r25, r25
 31a:	6a 95       	dec	r22
 31c:	e2 f7       	brpl	.-8      	; 0x316 <GPIO_writePin+0x1f2>
 31e:	80 95       	com	r24
 320:	82 23       	and	r24, r18
 322:	80 83       	st	Z, r24
 324:	08 95       	ret
 326:	89 30       	cpi	r24, 0x09	; 9
 328:	e9 f4       	brne	.+58     	; 0x364 <GPIO_writePin+0x240>
 32a:	41 30       	cpi	r20, 0x01	; 1
 32c:	69 f4       	brne	.+26     	; 0x348 <GPIO_writePin+0x224>
 32e:	e8 e0       	ldi	r30, 0x08	; 8
 330:	f1 e0       	ldi	r31, 0x01	; 1
 332:	20 81       	ld	r18, Z
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	02 c0       	rjmp	.+4      	; 0x33e <GPIO_writePin+0x21a>
 33a:	88 0f       	add	r24, r24
 33c:	99 1f       	adc	r25, r25
 33e:	6a 95       	dec	r22
 340:	e2 f7       	brpl	.-8      	; 0x33a <GPIO_writePin+0x216>
 342:	82 2b       	or	r24, r18
 344:	80 83       	st	Z, r24
 346:	08 95       	ret
 348:	e8 e0       	ldi	r30, 0x08	; 8
 34a:	f1 e0       	ldi	r31, 0x01	; 1
 34c:	20 81       	ld	r18, Z
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	02 c0       	rjmp	.+4      	; 0x358 <GPIO_writePin+0x234>
 354:	88 0f       	add	r24, r24
 356:	99 1f       	adc	r25, r25
 358:	6a 95       	dec	r22
 35a:	e2 f7       	brpl	.-8      	; 0x354 <GPIO_writePin+0x230>
 35c:	80 95       	com	r24
 35e:	82 23       	and	r24, r18
 360:	80 83       	st	Z, r24
 362:	08 95       	ret
 364:	8a 30       	cpi	r24, 0x0A	; 10
 366:	e1 f4       	brne	.+56     	; 0x3a0 <GPIO_writePin+0x27c>
 368:	41 30       	cpi	r20, 0x01	; 1
 36a:	69 f4       	brne	.+26     	; 0x386 <GPIO_writePin+0x262>
 36c:	eb e0       	ldi	r30, 0x0B	; 11
 36e:	f1 e0       	ldi	r31, 0x01	; 1
 370:	20 81       	ld	r18, Z
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	02 c0       	rjmp	.+4      	; 0x37c <GPIO_writePin+0x258>
 378:	88 0f       	add	r24, r24
 37a:	99 1f       	adc	r25, r25
 37c:	6a 95       	dec	r22
 37e:	e2 f7       	brpl	.-8      	; 0x378 <GPIO_writePin+0x254>
 380:	82 2b       	or	r24, r18
 382:	80 83       	st	Z, r24
 384:	08 95       	ret
 386:	eb e0       	ldi	r30, 0x0B	; 11
 388:	f1 e0       	ldi	r31, 0x01	; 1
 38a:	20 81       	ld	r18, Z
 38c:	81 e0       	ldi	r24, 0x01	; 1
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	02 c0       	rjmp	.+4      	; 0x396 <GPIO_writePin+0x272>
 392:	88 0f       	add	r24, r24
 394:	99 1f       	adc	r25, r25
 396:	6a 95       	dec	r22
 398:	e2 f7       	brpl	.-8      	; 0x392 <GPIO_writePin+0x26e>
 39a:	80 95       	com	r24
 39c:	82 23       	and	r24, r18
 39e:	80 83       	st	Z, r24
 3a0:	08 95       	ret

000003a2 <GPIO_writePort>:
	
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
 3a2:	8b 30       	cpi	r24, 0x0B	; 11
 3a4:	78 f5       	brcc	.+94     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		if(port_num == PORTA_ID)
 3a6:	81 11       	cpse	r24, r1
 3a8:	02 c0       	rjmp	.+4      	; 0x3ae <GPIO_writePort+0xc>
		{
			PORTA_REG = value;
 3aa:	62 b9       	out	0x02, r22	; 2
 3ac:	08 95       	ret
		}
		else if(port_num == PORTB_ID)
 3ae:	81 30       	cpi	r24, 0x01	; 1
 3b0:	11 f4       	brne	.+4      	; 0x3b6 <GPIO_writePort+0x14>
		{
			PORTB_REG = value;
 3b2:	65 b9       	out	0x05, r22	; 5
 3b4:	08 95       	ret
		}
		else if(port_num == PORTC_ID)
 3b6:	82 30       	cpi	r24, 0x02	; 2
 3b8:	11 f4       	brne	.+4      	; 0x3be <GPIO_writePort+0x1c>
		{
			PORTC_REG = value;
 3ba:	68 b9       	out	0x08, r22	; 8
 3bc:	08 95       	ret
		}
		else if(port_num == PORTD_ID)
 3be:	83 30       	cpi	r24, 0x03	; 3
 3c0:	11 f4       	brne	.+4      	; 0x3c6 <GPIO_writePort+0x24>
		{
			PORTD_REG = value;
 3c2:	6b b9       	out	0x0b, r22	; 11
 3c4:	08 95       	ret
		}
		else if(port_num == PORTE_ID)
 3c6:	84 30       	cpi	r24, 0x04	; 4
 3c8:	11 f4       	brne	.+4      	; 0x3ce <GPIO_writePort+0x2c>
		{
			PORTE_REG = value;
 3ca:	6e b9       	out	0x0e, r22	; 14
 3cc:	08 95       	ret
		}
		else if(port_num == PORTF_ID)
 3ce:	85 30       	cpi	r24, 0x05	; 5
 3d0:	11 f4       	brne	.+4      	; 0x3d6 <GPIO_writePort+0x34>
		{
			PORTF_REG = value;
 3d2:	61 bb       	out	0x11, r22	; 17
 3d4:	08 95       	ret
		}
		else if(port_num == PORTG_ID)
 3d6:	86 30       	cpi	r24, 0x06	; 6
 3d8:	11 f4       	brne	.+4      	; 0x3de <GPIO_writePort+0x3c>
		{
			PORTG_REG = value;
 3da:	64 bb       	out	0x14, r22	; 20
 3dc:	08 95       	ret
		}
		else if(port_num == PORTH_ID)
 3de:	87 30       	cpi	r24, 0x07	; 7
 3e0:	19 f4       	brne	.+6      	; 0x3e8 <GPIO_writePort+0x46>
		{
			PORTH_REG = value;
 3e2:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <__TEXT_REGION_LENGTH__+0x7c0102>
 3e6:	08 95       	ret
		}
		else if(port_num == PORTJ_ID)
 3e8:	88 30       	cpi	r24, 0x08	; 8
 3ea:	19 f4       	brne	.+6      	; 0x3f2 <GPIO_writePort+0x50>
		{
			PORTJ_REG = value;
 3ec:	60 93 05 01 	sts	0x0105, r22	; 0x800105 <__TEXT_REGION_LENGTH__+0x7c0105>
 3f0:	08 95       	ret
		}
		else if(port_num == PORTK_ID)
 3f2:	89 30       	cpi	r24, 0x09	; 9
 3f4:	19 f4       	brne	.+6      	; 0x3fc <GPIO_writePort+0x5a>
		{
			PORTK_REG = value;
 3f6:	60 93 08 01 	sts	0x0108, r22	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
 3fa:	08 95       	ret
		}
		else if(port_num == PORTL_ID)
 3fc:	8a 30       	cpi	r24, 0x0A	; 10
 3fe:	11 f4       	brne	.+4      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
		{
			PORTL_REG = value;
 400:	60 93 0b 01 	sts	0x010B, r22	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>
 404:	08 95       	ret

00000406 <LCD_sendCommand>:
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
 406:	cf 93       	push	r28
 408:	c8 2f       	mov	r28, r24
 40a:	40 e0       	ldi	r20, 0x00	; 0
 40c:	64 e0       	ldi	r22, 0x04	; 4
 40e:	81 e0       	ldi	r24, 0x01	; 1
 410:	89 de       	rcall	.-750    	; 0x124 <GPIO_writePin>
 412:	40 e0       	ldi	r20, 0x00	; 0
 414:	65 e0       	ldi	r22, 0x05	; 5
 416:	81 e0       	ldi	r24, 0x01	; 1
 418:	85 de       	rcall	.-758    	; 0x124 <GPIO_writePin>
 41a:	89 ef       	ldi	r24, 0xF9	; 249
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	01 97       	sbiw	r24, 0x01	; 1
 420:	f1 f7       	brne	.-4      	; 0x41e <LCD_sendCommand+0x18>
 422:	00 c0       	rjmp	.+0      	; 0x424 <LCD_sendCommand+0x1e>
 424:	00 00       	nop
 426:	41 e0       	ldi	r20, 0x01	; 1
 428:	66 e0       	ldi	r22, 0x06	; 6
 42a:	81 e0       	ldi	r24, 0x01	; 1
 42c:	7b de       	rcall	.-778    	; 0x124 <GPIO_writePin>
 42e:	89 ef       	ldi	r24, 0xF9	; 249
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	01 97       	sbiw	r24, 0x01	; 1
 434:	f1 f7       	brne	.-4      	; 0x432 <LCD_sendCommand+0x2c>
 436:	00 c0       	rjmp	.+0      	; 0x438 <LCD_sendCommand+0x32>
 438:	00 00       	nop
 43a:	6c 2f       	mov	r22, r28
 43c:	82 e0       	ldi	r24, 0x02	; 2
 43e:	b1 df       	rcall	.-158    	; 0x3a2 <GPIO_writePort>
 440:	89 ef       	ldi	r24, 0xF9	; 249
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	01 97       	sbiw	r24, 0x01	; 1
 446:	f1 f7       	brne	.-4      	; 0x444 <LCD_sendCommand+0x3e>
 448:	00 c0       	rjmp	.+0      	; 0x44a <LCD_sendCommand+0x44>
 44a:	00 00       	nop
 44c:	40 e0       	ldi	r20, 0x00	; 0
 44e:	66 e0       	ldi	r22, 0x06	; 6
 450:	81 e0       	ldi	r24, 0x01	; 1
 452:	68 de       	rcall	.-816    	; 0x124 <GPIO_writePin>
 454:	89 ef       	ldi	r24, 0xF9	; 249
 456:	90 e0       	ldi	r25, 0x00	; 0
 458:	01 97       	sbiw	r24, 0x01	; 1
 45a:	f1 f7       	brne	.-4      	; 0x458 <LCD_sendCommand+0x52>
 45c:	00 c0       	rjmp	.+0      	; 0x45e <LCD_sendCommand+0x58>
 45e:	00 00       	nop
 460:	cf 91       	pop	r28
 462:	08 95       	ret

00000464 <LCD_moveCursor>:
void LCD_moveCursor(uint8 row,uint8 col)
{
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
 464:	81 30       	cpi	r24, 0x01	; 1
 466:	31 f0       	breq	.+12     	; 0x474 <LCD_moveCursor+0x10>
 468:	70 f0       	brcs	.+28     	; 0x486 <LCD_moveCursor+0x22>
 46a:	82 30       	cpi	r24, 0x02	; 2
 46c:	31 f0       	breq	.+12     	; 0x47a <LCD_moveCursor+0x16>
 46e:	83 30       	cpi	r24, 0x03	; 3
 470:	39 f0       	breq	.+14     	; 0x480 <LCD_moveCursor+0x1c>
 472:	0a c0       	rjmp	.+20     	; 0x488 <LCD_moveCursor+0x24>
	{
		case 0:
			lcd_memory_address=col;
				break;
		case 1:
			lcd_memory_address=col+0x40;
 474:	90 e4       	ldi	r25, 0x40	; 64
 476:	96 0f       	add	r25, r22
				break;
 478:	07 c0       	rjmp	.+14     	; 0x488 <LCD_moveCursor+0x24>
		case 2:
			lcd_memory_address=col+0x10;
 47a:	90 e1       	ldi	r25, 0x10	; 16
 47c:	96 0f       	add	r25, r22
				break;
 47e:	04 c0       	rjmp	.+8      	; 0x488 <LCD_moveCursor+0x24>
		case 3:
			lcd_memory_address=col+0x50;
 480:	90 e5       	ldi	r25, 0x50	; 80
 482:	96 0f       	add	r25, r22
				break;
 484:	01 c0       	rjmp	.+2      	; 0x488 <LCD_moveCursor+0x24>
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
	{
		case 0:
			lcd_memory_address=col;
 486:	96 2f       	mov	r25, r22
		case 3:
			lcd_memory_address=col+0x50;
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
 488:	89 2f       	mov	r24, r25
 48a:	80 68       	ori	r24, 0x80	; 128
 48c:	bc cf       	rjmp	.-136    	; 0x406 <LCD_sendCommand>
 48e:	08 95       	ret

00000490 <main>:




int main(void)
{
 490:	cf 93       	push	r28
 492:	df 93       	push	r29
 494:	cd b7       	in	r28, 0x3d	; 61
 496:	de b7       	in	r29, 0x3e	; 62
 498:	69 97       	sbiw	r28, 0x19	; 25
 49a:	0f b6       	in	r0, 0x3f	; 63
 49c:	f8 94       	cli
 49e:	de bf       	out	0x3e, r29	; 62
 4a0:	0f be       	out	0x3f, r0	; 63
 4a2:	cd bf       	out	0x3d, r28	; 61
	char buffer[25];
	uint8 data = 'b';
	
	TWI_init();
 4a4:	ea d0       	rcall	.+468    	; 0x67a <TWI_init>
	TWI_start();
 4a6:	f4 d0       	rcall	.+488    	; 0x690 <TWI_start>
	UART0_init();
 4a8:	65 d1       	rcall	.+714    	; 0x774 <UART0_init>
    /* Replace with your application code */
    while (1) 
    {
		
		//UART0_Send(data);
		RTC_Read_Clock(0);							/* Read the clock with second address i.e location is 0 */
 4aa:	80 e0       	ldi	r24, 0x00	; 0
 4ac:	a6 d0       	rcall	.+332    	; 0x5fa <RTC_Read_Clock>
 4ae:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <hour>
				if (hour & TimeFormat12)
 4b2:	90 91 29 02 	lds	r25, 0x0229	; 0x800229 <hour+0x1>
 4b6:	86 ff       	sbrs	r24, 6
 4b8:	44 c0       	rjmp	.+136    	; 0x542 <main+0xb2>
 4ba:	20 91 25 02 	lds	r18, 0x0225	; 0x800225 <second+0x1>
				{
					sprintf(buffer, "%02x:%02x:%02x  ", (hour & 0b00011111), minute, second);
 4be:	2f 93       	push	r18
 4c0:	20 91 24 02 	lds	r18, 0x0224	; 0x800224 <second>
 4c4:	2f 93       	push	r18
 4c6:	20 91 27 02 	lds	r18, 0x0227	; 0x800227 <minute+0x1>
 4ca:	2f 93       	push	r18
 4cc:	20 91 26 02 	lds	r18, 0x0226	; 0x800226 <minute>
 4d0:	2f 93       	push	r18
 4d2:	8f 71       	andi	r24, 0x1F	; 31
 4d4:	99 27       	eor	r25, r25
 4d6:	9f 93       	push	r25
 4d8:	8f 93       	push	r24
 4da:	80 e0       	ldi	r24, 0x00	; 0
 4dc:	92 e0       	ldi	r25, 0x02	; 2
 4de:	9f 93       	push	r25
 4e0:	8f 93       	push	r24
 4e2:	ce 01       	movw	r24, r28
 4e4:	01 96       	adiw	r24, 0x01	; 1
 4e6:	9f 93       	push	r25
 4e8:	8f 93       	push	r24
 4ea:	76 d1       	rcall	.+748    	; 0x7d8 <sprintf>
					
					if(IsItPM(hour))
 4ec:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <hour>
 4f0:	7e d0       	rcall	.+252    	; 0x5ee <IsItPM>
 4f2:	0f b6       	in	r0, 0x3f	; 63
 4f4:	f8 94       	cli
 4f6:	de bf       	out	0x3e, r29	; 62
 4f8:	0f be       	out	0x3f, r0	; 63
 4fa:	cd bf       	out	0x3d, r28	; 61
 4fc:	88 23       	and	r24, r24
 4fe:	61 f0       	breq	.+24     	; 0x518 <main+0x88>
 500:	fe 01       	movw	r30, r28
					strcat(buffer, "PM");
 502:	31 96       	adiw	r30, 0x01	; 1
 504:	01 90       	ld	r0, Z+
 506:	00 20       	and	r0, r0
 508:	e9 f7       	brne	.-6      	; 0x504 <main+0x74>
 50a:	31 97       	sbiw	r30, 0x01	; 1
 50c:	80 e5       	ldi	r24, 0x50	; 80
 50e:	9d e4       	ldi	r25, 0x4D	; 77
 510:	91 83       	std	Z+1, r25	; 0x01
 512:	80 83       	st	Z, r24
 514:	12 82       	std	Z+2, r1	; 0x02
 516:	0b c0       	rjmp	.+22     	; 0x52e <main+0x9e>
 518:	fe 01       	movw	r30, r28
					else
					strcat(buffer, "AM");
 51a:	31 96       	adiw	r30, 0x01	; 1
 51c:	01 90       	ld	r0, Z+
 51e:	00 20       	and	r0, r0
 520:	e9 f7       	brne	.-6      	; 0x51c <main+0x8c>
 522:	31 97       	sbiw	r30, 0x01	; 1
 524:	81 e4       	ldi	r24, 0x41	; 65
 526:	9d e4       	ldi	r25, 0x4D	; 77
 528:	91 83       	std	Z+1, r25	; 0x01
 52a:	80 83       	st	Z, r24
 52c:	12 82       	std	Z+2, r1	; 0x02
 52e:	3f ef       	ldi	r19, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 530:	81 ee       	ldi	r24, 0xE1	; 225
 532:	94 e0       	ldi	r25, 0x04	; 4
 534:	31 50       	subi	r19, 0x01	; 1
 536:	80 40       	sbci	r24, 0x00	; 0
 538:	90 40       	sbci	r25, 0x00	; 0
 53a:	e1 f7       	brne	.-8      	; 0x534 <main+0xa4>
 53c:	00 c0       	rjmp	.+0      	; 0x53e <main+0xae>
 53e:	00 00       	nop
 540:	24 c0       	rjmp	.+72     	; 0x58a <main+0xfa>
 542:	20 91 25 02 	lds	r18, 0x0225	; 0x800225 <second+0x1>
					_delay_ms(100);
				}
				
				else
				{
					sprintf(buffer, "%02x:%02x:%02x  ", (hour & 0b00011111), minute, second);
 546:	2f 93       	push	r18
 548:	20 91 24 02 	lds	r18, 0x0224	; 0x800224 <second>
 54c:	2f 93       	push	r18
 54e:	20 91 27 02 	lds	r18, 0x0227	; 0x800227 <minute+0x1>
 552:	2f 93       	push	r18
 554:	20 91 26 02 	lds	r18, 0x0226	; 0x800226 <minute>
 558:	2f 93       	push	r18
 55a:	8f 71       	andi	r24, 0x1F	; 31
 55c:	99 27       	eor	r25, r25
 55e:	9f 93       	push	r25
 560:	8f 93       	push	r24
 562:	80 e0       	ldi	r24, 0x00	; 0
 564:	92 e0       	ldi	r25, 0x02	; 2
 566:	9f 93       	push	r25
 568:	8f 93       	push	r24
 56a:	8e 01       	movw	r16, r28
 56c:	0f 5f       	subi	r16, 0xFF	; 255
 56e:	1f 4f       	sbci	r17, 0xFF	; 255
 570:	1f 93       	push	r17
 572:	0f 93       	push	r16
					LCD_moveCursor(1,1);
 574:	31 d1       	rcall	.+610    	; 0x7d8 <sprintf>
 576:	61 e0       	ldi	r22, 0x01	; 1
 578:	81 e0       	ldi	r24, 0x01	; 1
 57a:	74 df       	rcall	.-280    	; 0x464 <LCD_moveCursor>
					UART0_sendString(buffer);
 57c:	c8 01       	movw	r24, r16
 57e:	1a d1       	rcall	.+564    	; 0x7b4 <UART0_sendString>
 580:	0f b6       	in	r0, 0x3f	; 63
 582:	f8 94       	cli
 584:	de bf       	out	0x3e, r29	; 62
 586:	0f be       	out	0x3f, r0	; 63
 588:	cd bf       	out	0x3d, r28	; 61
						
					
					
					//UART0_Send(buffer[8]);
				}
				RTC_Read_Calendar(3);						/* Read the calender with day address i.e location is 3 */
 58a:	83 e0       	ldi	r24, 0x03	; 3
 58c:	53 d0       	rcall	.+166    	; 0x634 <RTC_Read_Calendar>
 58e:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <year+0x1>
				sprintf(buffer, "%02x/%02x/%02x ", date, month, year);
 592:	8f 93       	push	r24
 594:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <year>
 598:	8f 93       	push	r24
 59a:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <__data_end+0x1>
 59e:	8f 93       	push	r24
 5a0:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <__data_end>
 5a4:	8f 93       	push	r24
 5a6:	80 91 2f 02 	lds	r24, 0x022F	; 0x80022f <date+0x1>
 5aa:	8f 93       	push	r24
 5ac:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <date>
 5b0:	8f 93       	push	r24
 5b2:	81 e1       	ldi	r24, 0x11	; 17
 5b4:	92 e0       	ldi	r25, 0x02	; 2
 5b6:	9f 93       	push	r25
 5b8:	8f 93       	push	r24
 5ba:	8e 01       	movw	r16, r28
 5bc:	0f 5f       	subi	r16, 0xFF	; 255
 5be:	1f 4f       	sbci	r17, 0xFF	; 255
 5c0:	1f 93       	push	r17
 5c2:	0f 93       	push	r16
				LCD_moveCursor(4,4);
 5c4:	09 d1       	rcall	.+530    	; 0x7d8 <sprintf>
 5c6:	64 e0       	ldi	r22, 0x04	; 4
 5c8:	84 e0       	ldi	r24, 0x04	; 4
 5ca:	4c df       	rcall	.-360    	; 0x464 <LCD_moveCursor>
				UART0_sendString(buffer);
 5cc:	c8 01       	movw	r24, r16
 5ce:	f2 d0       	rcall	.+484    	; 0x7b4 <UART0_sendString>
 5d0:	3f ef       	ldi	r19, 0xFF	; 255
 5d2:	81 ee       	ldi	r24, 0xE1	; 225
 5d4:	94 e0       	ldi	r25, 0x04	; 4
 5d6:	31 50       	subi	r19, 0x01	; 1
 5d8:	80 40       	sbci	r24, 0x00	; 0
 5da:	90 40       	sbci	r25, 0x00	; 0
 5dc:	e1 f7       	brne	.-8      	; 0x5d6 <main+0x146>
 5de:	00 c0       	rjmp	.+0      	; 0x5e0 <main+0x150>
 5e0:	00 00       	nop
 5e2:	0f b6       	in	r0, 0x3f	; 63
 5e4:	f8 94       	cli
 5e6:	de bf       	out	0x3e, r29	; 62
 5e8:	0f be       	out	0x3f, r0	; 63
 5ea:	cd bf       	out	0x3d, r28	; 61
 5ec:	5e cf       	rjmp	.-324    	; 0x4aa <main+0x1a>

000005ee <IsItPM>:
 */ 
#include "RTC1307.h"

bool IsItPM(char hour_)
{
	if(hour_ & (AMPM))
 5ee:	85 ff       	sbrs	r24, 5
 5f0:	02 c0       	rjmp	.+4      	; 0x5f6 <IsItPM+0x8>
	return 1;
 5f2:	81 e0       	ldi	r24, 0x01	; 1
 5f4:	08 95       	ret
	else
	return 0;
 5f6:	80 e0       	ldi	r24, 0x00	; 0
}
 5f8:	08 95       	ret

000005fa <RTC_Read_Clock>:

void RTC_Read_Clock(char read_clock_address)
{
 5fa:	cf 93       	push	r28
 5fc:	c8 2f       	mov	r28, r24
	I2C_Start(Device_Write_address);				/* Start I2C communication with RTC */
 5fe:	80 ed       	ldi	r24, 0xD0	; 208
 600:	95 d0       	rcall	.+298    	; 0x72c <I2C_Start>
	TWI_writeByte(read_clock_address);					/* Write address to read */
 602:	8c 2f       	mov	r24, r28
 604:	51 d0       	rcall	.+162    	; 0x6a8 <TWI_writeByte>
	twi_Repeated_Start(Device_Read_address);		/* Repeated start with device read address */
 606:	81 ed       	ldi	r24, 0xD1	; 209
 608:	6d d0       	rcall	.+218    	; 0x6e4 <twi_Repeated_Start>

	second = TWI_readByteWithACK();						/* Read second */
 60a:	58 d0       	rcall	.+176    	; 0x6bc <TWI_readByteWithACK>
 60c:	90 e0       	ldi	r25, 0x00	; 0
 60e:	90 93 25 02 	sts	0x0225, r25	; 0x800225 <second+0x1>
 612:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <second>
	minute = TWI_readByteWithACK();						/* Read minute */
 616:	52 d0       	rcall	.+164    	; 0x6bc <TWI_readByteWithACK>
 618:	90 e0       	ldi	r25, 0x00	; 0
 61a:	90 93 27 02 	sts	0x0227, r25	; 0x800227 <minute+0x1>
 61e:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <minute>
	hour = TWI_readByteWithNACK();							/* Read hour with Nack */
 622:	56 d0       	rcall	.+172    	; 0x6d0 <TWI_readByteWithNACK>
 624:	90 e0       	ldi	r25, 0x00	; 0
 626:	90 93 29 02 	sts	0x0229, r25	; 0x800229 <hour+0x1>
 62a:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <hour>
	TWI_stop();										/* Stop i2C communication */
 62e:	38 d0       	rcall	.+112    	; 0x6a0 <TWI_stop>
 630:	cf 91       	pop	r28
}
 632:	08 95       	ret

00000634 <RTC_Read_Calendar>:
 634:	cf 93       	push	r28

void RTC_Read_Calendar(char read_calendar_address)
{
 636:	c8 2f       	mov	r28, r24
	I2C_Start(Device_Write_address);				/* Start I2C communication with RTC */
 638:	80 ed       	ldi	r24, 0xD0	; 208
 63a:	78 d0       	rcall	.+240    	; 0x72c <I2C_Start>
	TWI_writeByte(read_calendar_address);
 63c:	8c 2f       	mov	r24, r28
 63e:	34 d0       	rcall	.+104    	; 0x6a8 <TWI_writeByte>
	twi_Repeated_Start(Device_Read_address);
 640:	81 ed       	ldi	r24, 0xD1	; 209
 642:	50 d0       	rcall	.+160    	; 0x6e4 <twi_Repeated_Start>

	day = TWI_readByteWithACK();							/* Read day */
 644:	3b d0       	rcall	.+118    	; 0x6bc <TWI_readByteWithACK>
 646:	90 e0       	ldi	r25, 0x00	; 0
 648:	90 93 2d 02 	sts	0x022D, r25	; 0x80022d <day+0x1>
 64c:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <day>
	date = TWI_readByteWithACK();							/* Read date */
 650:	35 d0       	rcall	.+106    	; 0x6bc <TWI_readByteWithACK>
 652:	90 e0       	ldi	r25, 0x00	; 0
 654:	90 93 2f 02 	sts	0x022F, r25	; 0x80022f <date+0x1>
 658:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <date>
	month = TWI_readByteWithACK();							/* Read month */
 65c:	2f d0       	rcall	.+94     	; 0x6bc <TWI_readByteWithACK>
 65e:	90 e0       	ldi	r25, 0x00	; 0
 660:	90 93 23 02 	sts	0x0223, r25	; 0x800223 <__data_end+0x1>
 664:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <__data_end>
	year = TWI_readByteWithNACK();							/* Read the year with Nack */
 668:	33 d0       	rcall	.+102    	; 0x6d0 <TWI_readByteWithNACK>
 66a:	90 e0       	ldi	r25, 0x00	; 0
 66c:	90 93 2b 02 	sts	0x022B, r25	; 0x80022b <year+0x1>
 670:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <year>
	TWI_stop();										/* Stop i2C communication */
 674:	15 d0       	rcall	.+42     	; 0x6a0 <TWI_stop>
 676:	cf 91       	pop	r28
}
 678:	08 95       	ret

0000067a <TWI_init>:
 67a:	82 e0       	ldi	r24, 0x02	; 2
{
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    return status;
}
 67c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
 680:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
 684:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7c00ba>
 688:	84 e0       	ldi	r24, 0x04	; 4
 68a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
 68e:	08 95       	ret

00000690 <TWI_start>:
 690:	84 ea       	ldi	r24, 0xA4	; 164
 692:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
 696:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
 69a:	88 23       	and	r24, r24
 69c:	e4 f7       	brge	.-8      	; 0x696 <TWI_start+0x6>
 69e:	08 95       	ret

000006a0 <TWI_stop>:
 6a0:	84 e9       	ldi	r24, 0x94	; 148
 6a2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
 6a6:	08 95       	ret

000006a8 <TWI_writeByte>:
 6a8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
 6ac:	84 e8       	ldi	r24, 0x84	; 132
 6ae:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
 6b2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
 6b6:	88 23       	and	r24, r24
 6b8:	e4 f7       	brge	.-8      	; 0x6b2 <TWI_writeByte+0xa>
 6ba:	08 95       	ret

000006bc <TWI_readByteWithACK>:
 6bc:	84 ec       	ldi	r24, 0xC4	; 196
 6be:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
 6c2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
 6c6:	88 23       	and	r24, r24
 6c8:	e4 f7       	brge	.-8      	; 0x6c2 <TWI_readByteWithACK+0x6>
 6ca:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
 6ce:	08 95       	ret

000006d0 <TWI_readByteWithNACK>:
 6d0:	84 e8       	ldi	r24, 0x84	; 132
 6d2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
 6d6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
 6da:	88 23       	and	r24, r24
 6dc:	e4 f7       	brge	.-8      	; 0x6d6 <TWI_readByteWithNACK+0x6>
 6de:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
 6e2:	08 95       	ret

000006e4 <twi_Repeated_Start>:


uint8_t twi_Repeated_Start(char read_address)				/* I2C repeated start function */
{
	uint8_t status;											/* Declare variable */
	TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);					/* Enable TWI, generate start condition and clear interrupt flag */
 6e4:	94 ea       	ldi	r25, 0xA4	; 164
 6e6:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (start condition) */
 6ea:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
 6ee:	99 23       	and	r25, r25
 6f0:	e4 f7       	brge	.-8      	; 0x6ea <twi_Repeated_Start+0x6>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
 6f2:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
 6f6:	98 7f       	andi	r25, 0xF8	; 248
	if (status != 0x10)										/* Check weather repeated start condition transmitted successfully or not? */
 6f8:	90 31       	cpi	r25, 0x10	; 16
 6fa:	91 f4       	brne	.+36     	; 0x720 <twi_Repeated_Start+0x3c>
	return 0;												/* If no then return 0 to indicate repeated start condition fail */
	TWDR = read_address;									/* If yes then write SLA+R in TWI data register */
 6fc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
 700:	84 e8       	ldi	r24, 0x84	; 132
 702:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
 706:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
 70a:	88 23       	and	r24, r24
 70c:	e4 f7       	brge	.-8      	; 0x706 <twi_Repeated_Start+0x22>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
 70e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
 712:	88 7f       	andi	r24, 0xF8	; 248
	if (status == 0x40)										/* Check weather SLA+R transmitted & ack received or not? */
 714:	80 34       	cpi	r24, 0x40	; 64
 716:	31 f0       	breq	.+12     	; 0x724 <twi_Repeated_Start+0x40>
	return 1;												/* If yes then return 1 to indicate ack received */
	if (status == 0x20)										/* Check weather SLA+R transmitted & nack received or not? */
 718:	80 32       	cpi	r24, 0x20	; 32
 71a:	31 f4       	brne	.+12     	; 0x728 <twi_Repeated_Start+0x44>
	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
 71c:	82 e0       	ldi	r24, 0x02	; 2
 71e:	08 95       	ret
	uint8_t status;											/* Declare variable */
	TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);					/* Enable TWI, generate start condition and clear interrupt flag */
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (start condition) */
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
	if (status != 0x10)										/* Check weather repeated start condition transmitted successfully or not? */
	return 0;												/* If no then return 0 to indicate repeated start condition fail */
 720:	80 e0       	ldi	r24, 0x00	; 0
 722:	08 95       	ret
	TWDR = read_address;									/* If yes then write SLA+R in TWI data register */
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
	if (status == 0x40)										/* Check weather SLA+R transmitted & ack received or not? */
	return 1;												/* If yes then return 1 to indicate ack received */
 724:	81 e0       	ldi	r24, 0x01	; 1
 726:	08 95       	ret
	if (status == 0x20)										/* Check weather SLA+R transmitted & nack received or not? */
	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
	else
	return 3;												/* Else return 3 to indicate SLA+W failed */
 728:	83 e0       	ldi	r24, 0x03	; 3
}
 72a:	08 95       	ret

0000072c <I2C_Start>:

uint8_t I2C_Start(char write_address)						/* I2C start function */
{
	uint8_t status;											/* Declare variable */
	TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);					/* Enable TWI, generate start condition and clear interrupt flag */
 72c:	94 ea       	ldi	r25, 0xA4	; 164
 72e:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (start condition) */
 732:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
 736:	99 23       	and	r25, r25
 738:	e4 f7       	brge	.-8      	; 0x732 <I2C_Start+0x6>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
 73a:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
 73e:	98 7f       	andi	r25, 0xF8	; 248
	if (status != 0x08)										/* Check weather start condition transmitted successfully or not? */
 740:	98 30       	cpi	r25, 0x08	; 8
 742:	91 f4       	brne	.+36     	; 0x768 <I2C_Start+0x3c>
	return 0;												/* If not then return 0 to indicate start condition fail */
	TWDR = write_address;									/* If yes then write SLA+W in TWI data register */
 744:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
 748:	84 e8       	ldi	r24, 0x84	; 132
 74a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
 74e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
 752:	88 23       	and	r24, r24
 754:	e4 f7       	brge	.-8      	; 0x74e <I2C_Start+0x22>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
 756:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
 75a:	88 7f       	andi	r24, 0xF8	; 248
	if (status == 0x18)										/* Check weather SLA+W transmitted & ack received or not? */
 75c:	88 31       	cpi	r24, 0x18	; 24
 75e:	31 f0       	breq	.+12     	; 0x76c <I2C_Start+0x40>
	return 1;												/* If yes then return 1 to indicate ack received i.e. ready to accept data byte */
	if (status == 0x20)										/* Check weather SLA+W transmitted & nack received or not? */
 760:	80 32       	cpi	r24, 0x20	; 32
 762:	31 f4       	brne	.+12     	; 0x770 <I2C_Start+0x44>
	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
 764:	82 e0       	ldi	r24, 0x02	; 2
 766:	08 95       	ret
	uint8_t status;											/* Declare variable */
	TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);					/* Enable TWI, generate start condition and clear interrupt flag */
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (start condition) */
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
	if (status != 0x08)										/* Check weather start condition transmitted successfully or not? */
	return 0;												/* If not then return 0 to indicate start condition fail */
 768:	80 e0       	ldi	r24, 0x00	; 0
 76a:	08 95       	ret
	TWDR = write_address;									/* If yes then write SLA+W in TWI data register */
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
	if (status == 0x18)										/* Check weather SLA+W transmitted & ack received or not? */
	return 1;												/* If yes then return 1 to indicate ack received i.e. ready to accept data byte */
 76c:	81 e0       	ldi	r24, 0x01	; 1
 76e:	08 95       	ret
	if (status == 0x20)										/* Check weather SLA+W transmitted & nack received or not? */
	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
	else
	return 3;												/* Else return 3 to indicate SLA+W failed */
 770:	83 e0       	ldi	r24, 0x03	; 3
 772:	08 95       	ret

00000774 <UART0_init>:
 
 uint8 UART0_ReceiveData(void)
 {
	 while(BIT_IS_CLEAR(UCSR0A,RXC0));
	 return UDR0;
 }
 774:	82 e0       	ldi	r24, 0x02	; 2
 776:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 77a:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
 77e:	85 ec       	ldi	r24, 0xC5	; 197
 780:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
 784:	e2 ec       	ldi	r30, 0xC2	; 194
 786:	f0 e0       	ldi	r31, 0x00	; 0
 788:	80 81       	ld	r24, Z
 78a:	88 60       	ori	r24, 0x08	; 8
 78c:	80 83       	st	Z, r24
 78e:	80 81       	ld	r24, Z
 790:	86 60       	ori	r24, 0x06	; 6
 792:	80 83       	st	Z, r24
 794:	e1 ec       	ldi	r30, 0xC1	; 193
 796:	f0 e0       	ldi	r31, 0x00	; 0
 798:	80 81       	ld	r24, Z
 79a:	80 61       	ori	r24, 0x10	; 16
 79c:	80 83       	st	Z, r24
 79e:	80 81       	ld	r24, Z
 7a0:	88 60       	ori	r24, 0x08	; 8
 7a2:	80 83       	st	Z, r24
 7a4:	08 95       	ret

000007a6 <UART0_Send>:
 7a6:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 7aa:	95 ff       	sbrs	r25, 5
 7ac:	fc cf       	rjmp	.-8      	; 0x7a6 <UART0_Send>
 7ae:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 7b2:	08 95       	ret

000007b4 <UART0_sendString>:

 void UART0_sendString(const uint8 *Str)
 {
 7b4:	0f 93       	push	r16
 7b6:	1f 93       	push	r17
 7b8:	cf 93       	push	r28
 7ba:	8c 01       	movw	r16, r24
	 uint8 i=0;
 7bc:	c0 e0       	ldi	r28, 0x00	; 0
	 while(Str[i] != '\0')
 7be:	02 c0       	rjmp	.+4      	; 0x7c4 <UART0_sendString+0x10>
	 {
		 UART0_Send(Str[i]);
 7c0:	f2 df       	rcall	.-28     	; 0x7a6 <UART0_Send>
		 i++;
 7c2:	cf 5f       	subi	r28, 0xFF	; 255
 }

 void UART0_sendString(const uint8 *Str)
 {
	 uint8 i=0;
	 while(Str[i] != '\0')
 7c4:	f8 01       	movw	r30, r16
 7c6:	ec 0f       	add	r30, r28
 7c8:	f1 1d       	adc	r31, r1
 7ca:	80 81       	ld	r24, Z
 7cc:	81 11       	cpse	r24, r1
 7ce:	f8 cf       	rjmp	.-16     	; 0x7c0 <UART0_sendString+0xc>
	 {
		 UART0_Send(Str[i]);
		 i++;
	 }
 }
 7d0:	cf 91       	pop	r28
 7d2:	1f 91       	pop	r17
 7d4:	0f 91       	pop	r16
 7d6:	08 95       	ret

000007d8 <sprintf>:
 7d8:	0f 93       	push	r16
 7da:	1f 93       	push	r17
 7dc:	cf 93       	push	r28
 7de:	df 93       	push	r29
 7e0:	cd b7       	in	r28, 0x3d	; 61
 7e2:	de b7       	in	r29, 0x3e	; 62
 7e4:	2e 97       	sbiw	r28, 0x0e	; 14
 7e6:	0f b6       	in	r0, 0x3f	; 63
 7e8:	f8 94       	cli
 7ea:	de bf       	out	0x3e, r29	; 62
 7ec:	0f be       	out	0x3f, r0	; 63
 7ee:	cd bf       	out	0x3d, r28	; 61
 7f0:	0e 89       	ldd	r16, Y+22	; 0x16
 7f2:	1f 89       	ldd	r17, Y+23	; 0x17
 7f4:	86 e0       	ldi	r24, 0x06	; 6
 7f6:	8c 83       	std	Y+4, r24	; 0x04
 7f8:	1a 83       	std	Y+2, r17	; 0x02
 7fa:	09 83       	std	Y+1, r16	; 0x01
 7fc:	8f ef       	ldi	r24, 0xFF	; 255
 7fe:	9f e7       	ldi	r25, 0x7F	; 127
 800:	9e 83       	std	Y+6, r25	; 0x06
 802:	8d 83       	std	Y+5, r24	; 0x05
 804:	ae 01       	movw	r20, r28
 806:	46 5e       	subi	r20, 0xE6	; 230
 808:	5f 4f       	sbci	r21, 0xFF	; 255
 80a:	68 8d       	ldd	r22, Y+24	; 0x18
 80c:	79 8d       	ldd	r23, Y+25	; 0x19
 80e:	ce 01       	movw	r24, r28
 810:	01 96       	adiw	r24, 0x01	; 1
 812:	10 d0       	rcall	.+32     	; 0x834 <vfprintf>
 814:	ef 81       	ldd	r30, Y+7	; 0x07
 816:	f8 85       	ldd	r31, Y+8	; 0x08
 818:	e0 0f       	add	r30, r16
 81a:	f1 1f       	adc	r31, r17
 81c:	10 82       	st	Z, r1
 81e:	2e 96       	adiw	r28, 0x0e	; 14
 820:	0f b6       	in	r0, 0x3f	; 63
 822:	f8 94       	cli
 824:	de bf       	out	0x3e, r29	; 62
 826:	0f be       	out	0x3f, r0	; 63
 828:	cd bf       	out	0x3d, r28	; 61
 82a:	df 91       	pop	r29
 82c:	cf 91       	pop	r28
 82e:	1f 91       	pop	r17
 830:	0f 91       	pop	r16
 832:	08 95       	ret

00000834 <vfprintf>:
 834:	2f 92       	push	r2
 836:	3f 92       	push	r3
 838:	4f 92       	push	r4
 83a:	5f 92       	push	r5
 83c:	6f 92       	push	r6
 83e:	7f 92       	push	r7
 840:	8f 92       	push	r8
 842:	9f 92       	push	r9
 844:	af 92       	push	r10
 846:	bf 92       	push	r11
 848:	cf 92       	push	r12
 84a:	df 92       	push	r13
 84c:	ef 92       	push	r14
 84e:	ff 92       	push	r15
 850:	0f 93       	push	r16
 852:	1f 93       	push	r17
 854:	cf 93       	push	r28
 856:	df 93       	push	r29
 858:	cd b7       	in	r28, 0x3d	; 61
 85a:	de b7       	in	r29, 0x3e	; 62
 85c:	2b 97       	sbiw	r28, 0x0b	; 11
 85e:	0f b6       	in	r0, 0x3f	; 63
 860:	f8 94       	cli
 862:	de bf       	out	0x3e, r29	; 62
 864:	0f be       	out	0x3f, r0	; 63
 866:	cd bf       	out	0x3d, r28	; 61
 868:	6c 01       	movw	r12, r24
 86a:	7b 01       	movw	r14, r22
 86c:	8a 01       	movw	r16, r20
 86e:	fc 01       	movw	r30, r24
 870:	17 82       	std	Z+7, r1	; 0x07
 872:	16 82       	std	Z+6, r1	; 0x06
 874:	83 81       	ldd	r24, Z+3	; 0x03
 876:	81 ff       	sbrs	r24, 1
 878:	bf c1       	rjmp	.+894    	; 0xbf8 <vfprintf+0x3c4>
 87a:	ce 01       	movw	r24, r28
 87c:	01 96       	adiw	r24, 0x01	; 1
 87e:	3c 01       	movw	r6, r24
 880:	f6 01       	movw	r30, r12
 882:	93 81       	ldd	r25, Z+3	; 0x03
 884:	f7 01       	movw	r30, r14
 886:	93 fd       	sbrc	r25, 3
 888:	85 91       	lpm	r24, Z+
 88a:	93 ff       	sbrs	r25, 3
 88c:	81 91       	ld	r24, Z+
 88e:	7f 01       	movw	r14, r30
 890:	88 23       	and	r24, r24
 892:	09 f4       	brne	.+2      	; 0x896 <vfprintf+0x62>
 894:	ad c1       	rjmp	.+858    	; 0xbf0 <vfprintf+0x3bc>
 896:	85 32       	cpi	r24, 0x25	; 37
 898:	39 f4       	brne	.+14     	; 0x8a8 <vfprintf+0x74>
 89a:	93 fd       	sbrc	r25, 3
 89c:	85 91       	lpm	r24, Z+
 89e:	93 ff       	sbrs	r25, 3
 8a0:	81 91       	ld	r24, Z+
 8a2:	7f 01       	movw	r14, r30
 8a4:	85 32       	cpi	r24, 0x25	; 37
 8a6:	21 f4       	brne	.+8      	; 0x8b0 <vfprintf+0x7c>
 8a8:	b6 01       	movw	r22, r12
 8aa:	90 e0       	ldi	r25, 0x00	; 0
 8ac:	d6 d1       	rcall	.+940    	; 0xc5a <fputc>
 8ae:	e8 cf       	rjmp	.-48     	; 0x880 <vfprintf+0x4c>
 8b0:	91 2c       	mov	r9, r1
 8b2:	21 2c       	mov	r2, r1
 8b4:	31 2c       	mov	r3, r1
 8b6:	ff e1       	ldi	r31, 0x1F	; 31
 8b8:	f3 15       	cp	r31, r3
 8ba:	d8 f0       	brcs	.+54     	; 0x8f2 <vfprintf+0xbe>
 8bc:	8b 32       	cpi	r24, 0x2B	; 43
 8be:	79 f0       	breq	.+30     	; 0x8de <vfprintf+0xaa>
 8c0:	38 f4       	brcc	.+14     	; 0x8d0 <vfprintf+0x9c>
 8c2:	80 32       	cpi	r24, 0x20	; 32
 8c4:	79 f0       	breq	.+30     	; 0x8e4 <vfprintf+0xb0>
 8c6:	83 32       	cpi	r24, 0x23	; 35
 8c8:	a1 f4       	brne	.+40     	; 0x8f2 <vfprintf+0xbe>
 8ca:	23 2d       	mov	r18, r3
 8cc:	20 61       	ori	r18, 0x10	; 16
 8ce:	1d c0       	rjmp	.+58     	; 0x90a <vfprintf+0xd6>
 8d0:	8d 32       	cpi	r24, 0x2D	; 45
 8d2:	61 f0       	breq	.+24     	; 0x8ec <vfprintf+0xb8>
 8d4:	80 33       	cpi	r24, 0x30	; 48
 8d6:	69 f4       	brne	.+26     	; 0x8f2 <vfprintf+0xbe>
 8d8:	23 2d       	mov	r18, r3
 8da:	21 60       	ori	r18, 0x01	; 1
 8dc:	16 c0       	rjmp	.+44     	; 0x90a <vfprintf+0xd6>
 8de:	83 2d       	mov	r24, r3
 8e0:	82 60       	ori	r24, 0x02	; 2
 8e2:	38 2e       	mov	r3, r24
 8e4:	e3 2d       	mov	r30, r3
 8e6:	e4 60       	ori	r30, 0x04	; 4
 8e8:	3e 2e       	mov	r3, r30
 8ea:	2a c0       	rjmp	.+84     	; 0x940 <vfprintf+0x10c>
 8ec:	f3 2d       	mov	r31, r3
 8ee:	f8 60       	ori	r31, 0x08	; 8
 8f0:	1d c0       	rjmp	.+58     	; 0x92c <vfprintf+0xf8>
 8f2:	37 fc       	sbrc	r3, 7
 8f4:	2d c0       	rjmp	.+90     	; 0x950 <vfprintf+0x11c>
 8f6:	20 ed       	ldi	r18, 0xD0	; 208
 8f8:	28 0f       	add	r18, r24
 8fa:	2a 30       	cpi	r18, 0x0A	; 10
 8fc:	40 f0       	brcs	.+16     	; 0x90e <vfprintf+0xda>
 8fe:	8e 32       	cpi	r24, 0x2E	; 46
 900:	b9 f4       	brne	.+46     	; 0x930 <vfprintf+0xfc>
 902:	36 fc       	sbrc	r3, 6
 904:	75 c1       	rjmp	.+746    	; 0xbf0 <vfprintf+0x3bc>
 906:	23 2d       	mov	r18, r3
 908:	20 64       	ori	r18, 0x40	; 64
 90a:	32 2e       	mov	r3, r18
 90c:	19 c0       	rjmp	.+50     	; 0x940 <vfprintf+0x10c>
 90e:	36 fe       	sbrs	r3, 6
 910:	06 c0       	rjmp	.+12     	; 0x91e <vfprintf+0xea>
 912:	8a e0       	ldi	r24, 0x0A	; 10
 914:	98 9e       	mul	r9, r24
 916:	20 0d       	add	r18, r0
 918:	11 24       	eor	r1, r1
 91a:	92 2e       	mov	r9, r18
 91c:	11 c0       	rjmp	.+34     	; 0x940 <vfprintf+0x10c>
 91e:	ea e0       	ldi	r30, 0x0A	; 10
 920:	2e 9e       	mul	r2, r30
 922:	20 0d       	add	r18, r0
 924:	11 24       	eor	r1, r1
 926:	22 2e       	mov	r2, r18
 928:	f3 2d       	mov	r31, r3
 92a:	f0 62       	ori	r31, 0x20	; 32
 92c:	3f 2e       	mov	r3, r31
 92e:	08 c0       	rjmp	.+16     	; 0x940 <vfprintf+0x10c>
 930:	8c 36       	cpi	r24, 0x6C	; 108
 932:	21 f4       	brne	.+8      	; 0x93c <vfprintf+0x108>
 934:	83 2d       	mov	r24, r3
 936:	80 68       	ori	r24, 0x80	; 128
 938:	38 2e       	mov	r3, r24
 93a:	02 c0       	rjmp	.+4      	; 0x940 <vfprintf+0x10c>
 93c:	88 36       	cpi	r24, 0x68	; 104
 93e:	41 f4       	brne	.+16     	; 0x950 <vfprintf+0x11c>
 940:	f7 01       	movw	r30, r14
 942:	93 fd       	sbrc	r25, 3
 944:	85 91       	lpm	r24, Z+
 946:	93 ff       	sbrs	r25, 3
 948:	81 91       	ld	r24, Z+
 94a:	7f 01       	movw	r14, r30
 94c:	81 11       	cpse	r24, r1
 94e:	b3 cf       	rjmp	.-154    	; 0x8b6 <vfprintf+0x82>
 950:	98 2f       	mov	r25, r24
 952:	9f 7d       	andi	r25, 0xDF	; 223
 954:	95 54       	subi	r25, 0x45	; 69
 956:	93 30       	cpi	r25, 0x03	; 3
 958:	28 f4       	brcc	.+10     	; 0x964 <vfprintf+0x130>
 95a:	0c 5f       	subi	r16, 0xFC	; 252
 95c:	1f 4f       	sbci	r17, 0xFF	; 255
 95e:	9f e3       	ldi	r25, 0x3F	; 63
 960:	99 83       	std	Y+1, r25	; 0x01
 962:	0d c0       	rjmp	.+26     	; 0x97e <vfprintf+0x14a>
 964:	83 36       	cpi	r24, 0x63	; 99
 966:	31 f0       	breq	.+12     	; 0x974 <vfprintf+0x140>
 968:	83 37       	cpi	r24, 0x73	; 115
 96a:	71 f0       	breq	.+28     	; 0x988 <vfprintf+0x154>
 96c:	83 35       	cpi	r24, 0x53	; 83
 96e:	09 f0       	breq	.+2      	; 0x972 <vfprintf+0x13e>
 970:	55 c0       	rjmp	.+170    	; 0xa1c <vfprintf+0x1e8>
 972:	20 c0       	rjmp	.+64     	; 0x9b4 <vfprintf+0x180>
 974:	f8 01       	movw	r30, r16
 976:	80 81       	ld	r24, Z
 978:	89 83       	std	Y+1, r24	; 0x01
 97a:	0e 5f       	subi	r16, 0xFE	; 254
 97c:	1f 4f       	sbci	r17, 0xFF	; 255
 97e:	88 24       	eor	r8, r8
 980:	83 94       	inc	r8
 982:	91 2c       	mov	r9, r1
 984:	53 01       	movw	r10, r6
 986:	12 c0       	rjmp	.+36     	; 0x9ac <vfprintf+0x178>
 988:	28 01       	movw	r4, r16
 98a:	f2 e0       	ldi	r31, 0x02	; 2
 98c:	4f 0e       	add	r4, r31
 98e:	51 1c       	adc	r5, r1
 990:	f8 01       	movw	r30, r16
 992:	a0 80       	ld	r10, Z
 994:	b1 80       	ldd	r11, Z+1	; 0x01
 996:	36 fe       	sbrs	r3, 6
 998:	03 c0       	rjmp	.+6      	; 0x9a0 <vfprintf+0x16c>
 99a:	69 2d       	mov	r22, r9
 99c:	70 e0       	ldi	r23, 0x00	; 0
 99e:	02 c0       	rjmp	.+4      	; 0x9a4 <vfprintf+0x170>
 9a0:	6f ef       	ldi	r22, 0xFF	; 255
 9a2:	7f ef       	ldi	r23, 0xFF	; 255
 9a4:	c5 01       	movw	r24, r10
 9a6:	4e d1       	rcall	.+668    	; 0xc44 <strnlen>
 9a8:	4c 01       	movw	r8, r24
 9aa:	82 01       	movw	r16, r4
 9ac:	f3 2d       	mov	r31, r3
 9ae:	ff 77       	andi	r31, 0x7F	; 127
 9b0:	3f 2e       	mov	r3, r31
 9b2:	15 c0       	rjmp	.+42     	; 0x9de <vfprintf+0x1aa>
 9b4:	28 01       	movw	r4, r16
 9b6:	22 e0       	ldi	r18, 0x02	; 2
 9b8:	42 0e       	add	r4, r18
 9ba:	51 1c       	adc	r5, r1
 9bc:	f8 01       	movw	r30, r16
 9be:	a0 80       	ld	r10, Z
 9c0:	b1 80       	ldd	r11, Z+1	; 0x01
 9c2:	36 fe       	sbrs	r3, 6
 9c4:	03 c0       	rjmp	.+6      	; 0x9cc <vfprintf+0x198>
 9c6:	69 2d       	mov	r22, r9
 9c8:	70 e0       	ldi	r23, 0x00	; 0
 9ca:	02 c0       	rjmp	.+4      	; 0x9d0 <vfprintf+0x19c>
 9cc:	6f ef       	ldi	r22, 0xFF	; 255
 9ce:	7f ef       	ldi	r23, 0xFF	; 255
 9d0:	c5 01       	movw	r24, r10
 9d2:	2d d1       	rcall	.+602    	; 0xc2e <strnlen_P>
 9d4:	4c 01       	movw	r8, r24
 9d6:	f3 2d       	mov	r31, r3
 9d8:	f0 68       	ori	r31, 0x80	; 128
 9da:	3f 2e       	mov	r3, r31
 9dc:	82 01       	movw	r16, r4
 9de:	33 fc       	sbrc	r3, 3
 9e0:	19 c0       	rjmp	.+50     	; 0xa14 <vfprintf+0x1e0>
 9e2:	82 2d       	mov	r24, r2
 9e4:	90 e0       	ldi	r25, 0x00	; 0
 9e6:	88 16       	cp	r8, r24
 9e8:	99 06       	cpc	r9, r25
 9ea:	a0 f4       	brcc	.+40     	; 0xa14 <vfprintf+0x1e0>
 9ec:	b6 01       	movw	r22, r12
 9ee:	80 e2       	ldi	r24, 0x20	; 32
 9f0:	90 e0       	ldi	r25, 0x00	; 0
 9f2:	33 d1       	rcall	.+614    	; 0xc5a <fputc>
 9f4:	2a 94       	dec	r2
 9f6:	f5 cf       	rjmp	.-22     	; 0x9e2 <vfprintf+0x1ae>
 9f8:	f5 01       	movw	r30, r10
 9fa:	37 fc       	sbrc	r3, 7
 9fc:	85 91       	lpm	r24, Z+
 9fe:	37 fe       	sbrs	r3, 7
 a00:	81 91       	ld	r24, Z+
 a02:	5f 01       	movw	r10, r30
 a04:	b6 01       	movw	r22, r12
 a06:	90 e0       	ldi	r25, 0x00	; 0
 a08:	28 d1       	rcall	.+592    	; 0xc5a <fputc>
 a0a:	21 10       	cpse	r2, r1
 a0c:	2a 94       	dec	r2
 a0e:	21 e0       	ldi	r18, 0x01	; 1
 a10:	82 1a       	sub	r8, r18
 a12:	91 08       	sbc	r9, r1
 a14:	81 14       	cp	r8, r1
 a16:	91 04       	cpc	r9, r1
 a18:	79 f7       	brne	.-34     	; 0x9f8 <vfprintf+0x1c4>
 a1a:	e1 c0       	rjmp	.+450    	; 0xbde <vfprintf+0x3aa>
 a1c:	84 36       	cpi	r24, 0x64	; 100
 a1e:	11 f0       	breq	.+4      	; 0xa24 <vfprintf+0x1f0>
 a20:	89 36       	cpi	r24, 0x69	; 105
 a22:	39 f5       	brne	.+78     	; 0xa72 <vfprintf+0x23e>
 a24:	f8 01       	movw	r30, r16
 a26:	37 fe       	sbrs	r3, 7
 a28:	07 c0       	rjmp	.+14     	; 0xa38 <vfprintf+0x204>
 a2a:	60 81       	ld	r22, Z
 a2c:	71 81       	ldd	r23, Z+1	; 0x01
 a2e:	82 81       	ldd	r24, Z+2	; 0x02
 a30:	93 81       	ldd	r25, Z+3	; 0x03
 a32:	0c 5f       	subi	r16, 0xFC	; 252
 a34:	1f 4f       	sbci	r17, 0xFF	; 255
 a36:	08 c0       	rjmp	.+16     	; 0xa48 <vfprintf+0x214>
 a38:	60 81       	ld	r22, Z
 a3a:	71 81       	ldd	r23, Z+1	; 0x01
 a3c:	07 2e       	mov	r0, r23
 a3e:	00 0c       	add	r0, r0
 a40:	88 0b       	sbc	r24, r24
 a42:	99 0b       	sbc	r25, r25
 a44:	0e 5f       	subi	r16, 0xFE	; 254
 a46:	1f 4f       	sbci	r17, 0xFF	; 255
 a48:	f3 2d       	mov	r31, r3
 a4a:	ff 76       	andi	r31, 0x6F	; 111
 a4c:	3f 2e       	mov	r3, r31
 a4e:	97 ff       	sbrs	r25, 7
 a50:	09 c0       	rjmp	.+18     	; 0xa64 <vfprintf+0x230>
 a52:	90 95       	com	r25
 a54:	80 95       	com	r24
 a56:	70 95       	com	r23
 a58:	61 95       	neg	r22
 a5a:	7f 4f       	sbci	r23, 0xFF	; 255
 a5c:	8f 4f       	sbci	r24, 0xFF	; 255
 a5e:	9f 4f       	sbci	r25, 0xFF	; 255
 a60:	f0 68       	ori	r31, 0x80	; 128
 a62:	3f 2e       	mov	r3, r31
 a64:	2a e0       	ldi	r18, 0x0A	; 10
 a66:	30 e0       	ldi	r19, 0x00	; 0
 a68:	a3 01       	movw	r20, r6
 a6a:	33 d1       	rcall	.+614    	; 0xcd2 <__ultoa_invert>
 a6c:	88 2e       	mov	r8, r24
 a6e:	86 18       	sub	r8, r6
 a70:	44 c0       	rjmp	.+136    	; 0xafa <vfprintf+0x2c6>
 a72:	85 37       	cpi	r24, 0x75	; 117
 a74:	31 f4       	brne	.+12     	; 0xa82 <vfprintf+0x24e>
 a76:	23 2d       	mov	r18, r3
 a78:	2f 7e       	andi	r18, 0xEF	; 239
 a7a:	b2 2e       	mov	r11, r18
 a7c:	2a e0       	ldi	r18, 0x0A	; 10
 a7e:	30 e0       	ldi	r19, 0x00	; 0
 a80:	25 c0       	rjmp	.+74     	; 0xacc <vfprintf+0x298>
 a82:	93 2d       	mov	r25, r3
 a84:	99 7f       	andi	r25, 0xF9	; 249
 a86:	b9 2e       	mov	r11, r25
 a88:	8f 36       	cpi	r24, 0x6F	; 111
 a8a:	c1 f0       	breq	.+48     	; 0xabc <vfprintf+0x288>
 a8c:	18 f4       	brcc	.+6      	; 0xa94 <vfprintf+0x260>
 a8e:	88 35       	cpi	r24, 0x58	; 88
 a90:	79 f0       	breq	.+30     	; 0xab0 <vfprintf+0x27c>
 a92:	ae c0       	rjmp	.+348    	; 0xbf0 <vfprintf+0x3bc>
 a94:	80 37       	cpi	r24, 0x70	; 112
 a96:	19 f0       	breq	.+6      	; 0xa9e <vfprintf+0x26a>
 a98:	88 37       	cpi	r24, 0x78	; 120
 a9a:	21 f0       	breq	.+8      	; 0xaa4 <vfprintf+0x270>
 a9c:	a9 c0       	rjmp	.+338    	; 0xbf0 <vfprintf+0x3bc>
 a9e:	e9 2f       	mov	r30, r25
 aa0:	e0 61       	ori	r30, 0x10	; 16
 aa2:	be 2e       	mov	r11, r30
 aa4:	b4 fe       	sbrs	r11, 4
 aa6:	0d c0       	rjmp	.+26     	; 0xac2 <vfprintf+0x28e>
 aa8:	fb 2d       	mov	r31, r11
 aaa:	f4 60       	ori	r31, 0x04	; 4
 aac:	bf 2e       	mov	r11, r31
 aae:	09 c0       	rjmp	.+18     	; 0xac2 <vfprintf+0x28e>
 ab0:	34 fe       	sbrs	r3, 4
 ab2:	0a c0       	rjmp	.+20     	; 0xac8 <vfprintf+0x294>
 ab4:	29 2f       	mov	r18, r25
 ab6:	26 60       	ori	r18, 0x06	; 6
 ab8:	b2 2e       	mov	r11, r18
 aba:	06 c0       	rjmp	.+12     	; 0xac8 <vfprintf+0x294>
 abc:	28 e0       	ldi	r18, 0x08	; 8
 abe:	30 e0       	ldi	r19, 0x00	; 0
 ac0:	05 c0       	rjmp	.+10     	; 0xacc <vfprintf+0x298>
 ac2:	20 e1       	ldi	r18, 0x10	; 16
 ac4:	30 e0       	ldi	r19, 0x00	; 0
 ac6:	02 c0       	rjmp	.+4      	; 0xacc <vfprintf+0x298>
 ac8:	20 e1       	ldi	r18, 0x10	; 16
 aca:	32 e0       	ldi	r19, 0x02	; 2
 acc:	f8 01       	movw	r30, r16
 ace:	b7 fe       	sbrs	r11, 7
 ad0:	07 c0       	rjmp	.+14     	; 0xae0 <vfprintf+0x2ac>
 ad2:	60 81       	ld	r22, Z
 ad4:	71 81       	ldd	r23, Z+1	; 0x01
 ad6:	82 81       	ldd	r24, Z+2	; 0x02
 ad8:	93 81       	ldd	r25, Z+3	; 0x03
 ada:	0c 5f       	subi	r16, 0xFC	; 252
 adc:	1f 4f       	sbci	r17, 0xFF	; 255
 ade:	06 c0       	rjmp	.+12     	; 0xaec <vfprintf+0x2b8>
 ae0:	60 81       	ld	r22, Z
 ae2:	71 81       	ldd	r23, Z+1	; 0x01
 ae4:	80 e0       	ldi	r24, 0x00	; 0
 ae6:	90 e0       	ldi	r25, 0x00	; 0
 ae8:	0e 5f       	subi	r16, 0xFE	; 254
 aea:	1f 4f       	sbci	r17, 0xFF	; 255
 aec:	a3 01       	movw	r20, r6
 aee:	f1 d0       	rcall	.+482    	; 0xcd2 <__ultoa_invert>
 af0:	88 2e       	mov	r8, r24
 af2:	86 18       	sub	r8, r6
 af4:	fb 2d       	mov	r31, r11
 af6:	ff 77       	andi	r31, 0x7F	; 127
 af8:	3f 2e       	mov	r3, r31
 afa:	36 fe       	sbrs	r3, 6
 afc:	0d c0       	rjmp	.+26     	; 0xb18 <vfprintf+0x2e4>
 afe:	23 2d       	mov	r18, r3
 b00:	2e 7f       	andi	r18, 0xFE	; 254
 b02:	a2 2e       	mov	r10, r18
 b04:	89 14       	cp	r8, r9
 b06:	58 f4       	brcc	.+22     	; 0xb1e <vfprintf+0x2ea>
 b08:	34 fe       	sbrs	r3, 4
 b0a:	0b c0       	rjmp	.+22     	; 0xb22 <vfprintf+0x2ee>
 b0c:	32 fc       	sbrc	r3, 2
 b0e:	09 c0       	rjmp	.+18     	; 0xb22 <vfprintf+0x2ee>
 b10:	83 2d       	mov	r24, r3
 b12:	8e 7e       	andi	r24, 0xEE	; 238
 b14:	a8 2e       	mov	r10, r24
 b16:	05 c0       	rjmp	.+10     	; 0xb22 <vfprintf+0x2ee>
 b18:	b8 2c       	mov	r11, r8
 b1a:	a3 2c       	mov	r10, r3
 b1c:	03 c0       	rjmp	.+6      	; 0xb24 <vfprintf+0x2f0>
 b1e:	b8 2c       	mov	r11, r8
 b20:	01 c0       	rjmp	.+2      	; 0xb24 <vfprintf+0x2f0>
 b22:	b9 2c       	mov	r11, r9
 b24:	a4 fe       	sbrs	r10, 4
 b26:	0f c0       	rjmp	.+30     	; 0xb46 <vfprintf+0x312>
 b28:	fe 01       	movw	r30, r28
 b2a:	e8 0d       	add	r30, r8
 b2c:	f1 1d       	adc	r31, r1
 b2e:	80 81       	ld	r24, Z
 b30:	80 33       	cpi	r24, 0x30	; 48
 b32:	21 f4       	brne	.+8      	; 0xb3c <vfprintf+0x308>
 b34:	9a 2d       	mov	r25, r10
 b36:	99 7e       	andi	r25, 0xE9	; 233
 b38:	a9 2e       	mov	r10, r25
 b3a:	09 c0       	rjmp	.+18     	; 0xb4e <vfprintf+0x31a>
 b3c:	a2 fe       	sbrs	r10, 2
 b3e:	06 c0       	rjmp	.+12     	; 0xb4c <vfprintf+0x318>
 b40:	b3 94       	inc	r11
 b42:	b3 94       	inc	r11
 b44:	04 c0       	rjmp	.+8      	; 0xb4e <vfprintf+0x31a>
 b46:	8a 2d       	mov	r24, r10
 b48:	86 78       	andi	r24, 0x86	; 134
 b4a:	09 f0       	breq	.+2      	; 0xb4e <vfprintf+0x31a>
 b4c:	b3 94       	inc	r11
 b4e:	a3 fc       	sbrc	r10, 3
 b50:	10 c0       	rjmp	.+32     	; 0xb72 <vfprintf+0x33e>
 b52:	a0 fe       	sbrs	r10, 0
 b54:	06 c0       	rjmp	.+12     	; 0xb62 <vfprintf+0x32e>
 b56:	b2 14       	cp	r11, r2
 b58:	80 f4       	brcc	.+32     	; 0xb7a <vfprintf+0x346>
 b5a:	28 0c       	add	r2, r8
 b5c:	92 2c       	mov	r9, r2
 b5e:	9b 18       	sub	r9, r11
 b60:	0d c0       	rjmp	.+26     	; 0xb7c <vfprintf+0x348>
 b62:	b2 14       	cp	r11, r2
 b64:	58 f4       	brcc	.+22     	; 0xb7c <vfprintf+0x348>
 b66:	b6 01       	movw	r22, r12
 b68:	80 e2       	ldi	r24, 0x20	; 32
 b6a:	90 e0       	ldi	r25, 0x00	; 0
 b6c:	76 d0       	rcall	.+236    	; 0xc5a <fputc>
 b6e:	b3 94       	inc	r11
 b70:	f8 cf       	rjmp	.-16     	; 0xb62 <vfprintf+0x32e>
 b72:	b2 14       	cp	r11, r2
 b74:	18 f4       	brcc	.+6      	; 0xb7c <vfprintf+0x348>
 b76:	2b 18       	sub	r2, r11
 b78:	02 c0       	rjmp	.+4      	; 0xb7e <vfprintf+0x34a>
 b7a:	98 2c       	mov	r9, r8
 b7c:	21 2c       	mov	r2, r1
 b7e:	a4 fe       	sbrs	r10, 4
 b80:	0f c0       	rjmp	.+30     	; 0xba0 <vfprintf+0x36c>
 b82:	b6 01       	movw	r22, r12
 b84:	80 e3       	ldi	r24, 0x30	; 48
 b86:	90 e0       	ldi	r25, 0x00	; 0
 b88:	68 d0       	rcall	.+208    	; 0xc5a <fputc>
 b8a:	a2 fe       	sbrs	r10, 2
 b8c:	16 c0       	rjmp	.+44     	; 0xbba <vfprintf+0x386>
 b8e:	a1 fc       	sbrc	r10, 1
 b90:	03 c0       	rjmp	.+6      	; 0xb98 <vfprintf+0x364>
 b92:	88 e7       	ldi	r24, 0x78	; 120
 b94:	90 e0       	ldi	r25, 0x00	; 0
 b96:	02 c0       	rjmp	.+4      	; 0xb9c <vfprintf+0x368>
 b98:	88 e5       	ldi	r24, 0x58	; 88
 b9a:	90 e0       	ldi	r25, 0x00	; 0
 b9c:	b6 01       	movw	r22, r12
 b9e:	0c c0       	rjmp	.+24     	; 0xbb8 <vfprintf+0x384>
 ba0:	8a 2d       	mov	r24, r10
 ba2:	86 78       	andi	r24, 0x86	; 134
 ba4:	51 f0       	breq	.+20     	; 0xbba <vfprintf+0x386>
 ba6:	a1 fe       	sbrs	r10, 1
 ba8:	02 c0       	rjmp	.+4      	; 0xbae <vfprintf+0x37a>
 baa:	8b e2       	ldi	r24, 0x2B	; 43
 bac:	01 c0       	rjmp	.+2      	; 0xbb0 <vfprintf+0x37c>
 bae:	80 e2       	ldi	r24, 0x20	; 32
 bb0:	a7 fc       	sbrc	r10, 7
 bb2:	8d e2       	ldi	r24, 0x2D	; 45
 bb4:	b6 01       	movw	r22, r12
 bb6:	90 e0       	ldi	r25, 0x00	; 0
 bb8:	50 d0       	rcall	.+160    	; 0xc5a <fputc>
 bba:	89 14       	cp	r8, r9
 bbc:	30 f4       	brcc	.+12     	; 0xbca <vfprintf+0x396>
 bbe:	b6 01       	movw	r22, r12
 bc0:	80 e3       	ldi	r24, 0x30	; 48
 bc2:	90 e0       	ldi	r25, 0x00	; 0
 bc4:	4a d0       	rcall	.+148    	; 0xc5a <fputc>
 bc6:	9a 94       	dec	r9
 bc8:	f8 cf       	rjmp	.-16     	; 0xbba <vfprintf+0x386>
 bca:	8a 94       	dec	r8
 bcc:	f3 01       	movw	r30, r6
 bce:	e8 0d       	add	r30, r8
 bd0:	f1 1d       	adc	r31, r1
 bd2:	80 81       	ld	r24, Z
 bd4:	b6 01       	movw	r22, r12
 bd6:	90 e0       	ldi	r25, 0x00	; 0
 bd8:	40 d0       	rcall	.+128    	; 0xc5a <fputc>
 bda:	81 10       	cpse	r8, r1
 bdc:	f6 cf       	rjmp	.-20     	; 0xbca <vfprintf+0x396>
 bde:	22 20       	and	r2, r2
 be0:	09 f4       	brne	.+2      	; 0xbe4 <vfprintf+0x3b0>
 be2:	4e ce       	rjmp	.-868    	; 0x880 <vfprintf+0x4c>
 be4:	b6 01       	movw	r22, r12
 be6:	80 e2       	ldi	r24, 0x20	; 32
 be8:	90 e0       	ldi	r25, 0x00	; 0
 bea:	37 d0       	rcall	.+110    	; 0xc5a <fputc>
 bec:	2a 94       	dec	r2
 bee:	f7 cf       	rjmp	.-18     	; 0xbde <vfprintf+0x3aa>
 bf0:	f6 01       	movw	r30, r12
 bf2:	86 81       	ldd	r24, Z+6	; 0x06
 bf4:	97 81       	ldd	r25, Z+7	; 0x07
 bf6:	02 c0       	rjmp	.+4      	; 0xbfc <vfprintf+0x3c8>
 bf8:	8f ef       	ldi	r24, 0xFF	; 255
 bfa:	9f ef       	ldi	r25, 0xFF	; 255
 bfc:	2b 96       	adiw	r28, 0x0b	; 11
 bfe:	0f b6       	in	r0, 0x3f	; 63
 c00:	f8 94       	cli
 c02:	de bf       	out	0x3e, r29	; 62
 c04:	0f be       	out	0x3f, r0	; 63
 c06:	cd bf       	out	0x3d, r28	; 61
 c08:	df 91       	pop	r29
 c0a:	cf 91       	pop	r28
 c0c:	1f 91       	pop	r17
 c0e:	0f 91       	pop	r16
 c10:	ff 90       	pop	r15
 c12:	ef 90       	pop	r14
 c14:	df 90       	pop	r13
 c16:	cf 90       	pop	r12
 c18:	bf 90       	pop	r11
 c1a:	af 90       	pop	r10
 c1c:	9f 90       	pop	r9
 c1e:	8f 90       	pop	r8
 c20:	7f 90       	pop	r7
 c22:	6f 90       	pop	r6
 c24:	5f 90       	pop	r5
 c26:	4f 90       	pop	r4
 c28:	3f 90       	pop	r3
 c2a:	2f 90       	pop	r2
 c2c:	08 95       	ret

00000c2e <strnlen_P>:
 c2e:	fc 01       	movw	r30, r24
 c30:	05 90       	lpm	r0, Z+
 c32:	61 50       	subi	r22, 0x01	; 1
 c34:	70 40       	sbci	r23, 0x00	; 0
 c36:	01 10       	cpse	r0, r1
 c38:	d8 f7       	brcc	.-10     	; 0xc30 <strnlen_P+0x2>
 c3a:	80 95       	com	r24
 c3c:	90 95       	com	r25
 c3e:	8e 0f       	add	r24, r30
 c40:	9f 1f       	adc	r25, r31
 c42:	08 95       	ret

00000c44 <strnlen>:
 c44:	fc 01       	movw	r30, r24
 c46:	61 50       	subi	r22, 0x01	; 1
 c48:	70 40       	sbci	r23, 0x00	; 0
 c4a:	01 90       	ld	r0, Z+
 c4c:	01 10       	cpse	r0, r1
 c4e:	d8 f7       	brcc	.-10     	; 0xc46 <strnlen+0x2>
 c50:	80 95       	com	r24
 c52:	90 95       	com	r25
 c54:	8e 0f       	add	r24, r30
 c56:	9f 1f       	adc	r25, r31
 c58:	08 95       	ret

00000c5a <fputc>:
 c5a:	0f 93       	push	r16
 c5c:	1f 93       	push	r17
 c5e:	cf 93       	push	r28
 c60:	df 93       	push	r29
 c62:	fb 01       	movw	r30, r22
 c64:	23 81       	ldd	r18, Z+3	; 0x03
 c66:	21 fd       	sbrc	r18, 1
 c68:	03 c0       	rjmp	.+6      	; 0xc70 <fputc+0x16>
 c6a:	8f ef       	ldi	r24, 0xFF	; 255
 c6c:	9f ef       	ldi	r25, 0xFF	; 255
 c6e:	2c c0       	rjmp	.+88     	; 0xcc8 <fputc+0x6e>
 c70:	22 ff       	sbrs	r18, 2
 c72:	16 c0       	rjmp	.+44     	; 0xca0 <fputc+0x46>
 c74:	46 81       	ldd	r20, Z+6	; 0x06
 c76:	57 81       	ldd	r21, Z+7	; 0x07
 c78:	24 81       	ldd	r18, Z+4	; 0x04
 c7a:	35 81       	ldd	r19, Z+5	; 0x05
 c7c:	42 17       	cp	r20, r18
 c7e:	53 07       	cpc	r21, r19
 c80:	44 f4       	brge	.+16     	; 0xc92 <fputc+0x38>
 c82:	a0 81       	ld	r26, Z
 c84:	b1 81       	ldd	r27, Z+1	; 0x01
 c86:	9d 01       	movw	r18, r26
 c88:	2f 5f       	subi	r18, 0xFF	; 255
 c8a:	3f 4f       	sbci	r19, 0xFF	; 255
 c8c:	31 83       	std	Z+1, r19	; 0x01
 c8e:	20 83       	st	Z, r18
 c90:	8c 93       	st	X, r24
 c92:	26 81       	ldd	r18, Z+6	; 0x06
 c94:	37 81       	ldd	r19, Z+7	; 0x07
 c96:	2f 5f       	subi	r18, 0xFF	; 255
 c98:	3f 4f       	sbci	r19, 0xFF	; 255
 c9a:	37 83       	std	Z+7, r19	; 0x07
 c9c:	26 83       	std	Z+6, r18	; 0x06
 c9e:	14 c0       	rjmp	.+40     	; 0xcc8 <fputc+0x6e>
 ca0:	8b 01       	movw	r16, r22
 ca2:	ec 01       	movw	r28, r24
 ca4:	fb 01       	movw	r30, r22
 ca6:	00 84       	ldd	r0, Z+8	; 0x08
 ca8:	f1 85       	ldd	r31, Z+9	; 0x09
 caa:	e0 2d       	mov	r30, r0
 cac:	19 95       	eicall
 cae:	89 2b       	or	r24, r25
 cb0:	e1 f6       	brne	.-72     	; 0xc6a <fputc+0x10>
 cb2:	d8 01       	movw	r26, r16
 cb4:	16 96       	adiw	r26, 0x06	; 6
 cb6:	8d 91       	ld	r24, X+
 cb8:	9c 91       	ld	r25, X
 cba:	17 97       	sbiw	r26, 0x07	; 7
 cbc:	01 96       	adiw	r24, 0x01	; 1
 cbe:	17 96       	adiw	r26, 0x07	; 7
 cc0:	9c 93       	st	X, r25
 cc2:	8e 93       	st	-X, r24
 cc4:	16 97       	sbiw	r26, 0x06	; 6
 cc6:	ce 01       	movw	r24, r28
 cc8:	df 91       	pop	r29
 cca:	cf 91       	pop	r28
 ccc:	1f 91       	pop	r17
 cce:	0f 91       	pop	r16
 cd0:	08 95       	ret

00000cd2 <__ultoa_invert>:
 cd2:	fa 01       	movw	r30, r20
 cd4:	aa 27       	eor	r26, r26
 cd6:	28 30       	cpi	r18, 0x08	; 8
 cd8:	51 f1       	breq	.+84     	; 0xd2e <__ultoa_invert+0x5c>
 cda:	20 31       	cpi	r18, 0x10	; 16
 cdc:	81 f1       	breq	.+96     	; 0xd3e <__ultoa_invert+0x6c>
 cde:	e8 94       	clt
 ce0:	6f 93       	push	r22
 ce2:	6e 7f       	andi	r22, 0xFE	; 254
 ce4:	6e 5f       	subi	r22, 0xFE	; 254
 ce6:	7f 4f       	sbci	r23, 0xFF	; 255
 ce8:	8f 4f       	sbci	r24, 0xFF	; 255
 cea:	9f 4f       	sbci	r25, 0xFF	; 255
 cec:	af 4f       	sbci	r26, 0xFF	; 255
 cee:	b1 e0       	ldi	r27, 0x01	; 1
 cf0:	3e d0       	rcall	.+124    	; 0xd6e <__ultoa_invert+0x9c>
 cf2:	b4 e0       	ldi	r27, 0x04	; 4
 cf4:	3c d0       	rcall	.+120    	; 0xd6e <__ultoa_invert+0x9c>
 cf6:	67 0f       	add	r22, r23
 cf8:	78 1f       	adc	r23, r24
 cfa:	89 1f       	adc	r24, r25
 cfc:	9a 1f       	adc	r25, r26
 cfe:	a1 1d       	adc	r26, r1
 d00:	68 0f       	add	r22, r24
 d02:	79 1f       	adc	r23, r25
 d04:	8a 1f       	adc	r24, r26
 d06:	91 1d       	adc	r25, r1
 d08:	a1 1d       	adc	r26, r1
 d0a:	6a 0f       	add	r22, r26
 d0c:	71 1d       	adc	r23, r1
 d0e:	81 1d       	adc	r24, r1
 d10:	91 1d       	adc	r25, r1
 d12:	a1 1d       	adc	r26, r1
 d14:	20 d0       	rcall	.+64     	; 0xd56 <__ultoa_invert+0x84>
 d16:	09 f4       	brne	.+2      	; 0xd1a <__ultoa_invert+0x48>
 d18:	68 94       	set
 d1a:	3f 91       	pop	r19
 d1c:	2a e0       	ldi	r18, 0x0A	; 10
 d1e:	26 9f       	mul	r18, r22
 d20:	11 24       	eor	r1, r1
 d22:	30 19       	sub	r19, r0
 d24:	30 5d       	subi	r19, 0xD0	; 208
 d26:	31 93       	st	Z+, r19
 d28:	de f6       	brtc	.-74     	; 0xce0 <__ultoa_invert+0xe>
 d2a:	cf 01       	movw	r24, r30
 d2c:	08 95       	ret
 d2e:	46 2f       	mov	r20, r22
 d30:	47 70       	andi	r20, 0x07	; 7
 d32:	40 5d       	subi	r20, 0xD0	; 208
 d34:	41 93       	st	Z+, r20
 d36:	b3 e0       	ldi	r27, 0x03	; 3
 d38:	0f d0       	rcall	.+30     	; 0xd58 <__ultoa_invert+0x86>
 d3a:	c9 f7       	brne	.-14     	; 0xd2e <__ultoa_invert+0x5c>
 d3c:	f6 cf       	rjmp	.-20     	; 0xd2a <__ultoa_invert+0x58>
 d3e:	46 2f       	mov	r20, r22
 d40:	4f 70       	andi	r20, 0x0F	; 15
 d42:	40 5d       	subi	r20, 0xD0	; 208
 d44:	4a 33       	cpi	r20, 0x3A	; 58
 d46:	18 f0       	brcs	.+6      	; 0xd4e <__ultoa_invert+0x7c>
 d48:	49 5d       	subi	r20, 0xD9	; 217
 d4a:	31 fd       	sbrc	r19, 1
 d4c:	40 52       	subi	r20, 0x20	; 32
 d4e:	41 93       	st	Z+, r20
 d50:	02 d0       	rcall	.+4      	; 0xd56 <__ultoa_invert+0x84>
 d52:	a9 f7       	brne	.-22     	; 0xd3e <__ultoa_invert+0x6c>
 d54:	ea cf       	rjmp	.-44     	; 0xd2a <__ultoa_invert+0x58>
 d56:	b4 e0       	ldi	r27, 0x04	; 4
 d58:	a6 95       	lsr	r26
 d5a:	97 95       	ror	r25
 d5c:	87 95       	ror	r24
 d5e:	77 95       	ror	r23
 d60:	67 95       	ror	r22
 d62:	ba 95       	dec	r27
 d64:	c9 f7       	brne	.-14     	; 0xd58 <__ultoa_invert+0x86>
 d66:	00 97       	sbiw	r24, 0x00	; 0
 d68:	61 05       	cpc	r22, r1
 d6a:	71 05       	cpc	r23, r1
 d6c:	08 95       	ret
 d6e:	9b 01       	movw	r18, r22
 d70:	ac 01       	movw	r20, r24
 d72:	0a 2e       	mov	r0, r26
 d74:	06 94       	lsr	r0
 d76:	57 95       	ror	r21
 d78:	47 95       	ror	r20
 d7a:	37 95       	ror	r19
 d7c:	27 95       	ror	r18
 d7e:	ba 95       	dec	r27
 d80:	c9 f7       	brne	.-14     	; 0xd74 <__ultoa_invert+0xa2>
 d82:	62 0f       	add	r22, r18
 d84:	73 1f       	adc	r23, r19
 d86:	84 1f       	adc	r24, r20
 d88:	95 1f       	adc	r25, r21
 d8a:	a0 1d       	adc	r26, r0
 d8c:	08 95       	ret

00000d8e <_exit>:
 d8e:	f8 94       	cli

00000d90 <__stop_program>:
 d90:	ff cf       	rjmp	.-2      	; 0xd90 <__stop_program>
